import asyncio
import secrets
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_CHAT_ID = -1002593269045  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç ID

# WireGuard —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

issued_clients = {}
last_assigned_ip = 1
user_tariffs = {}  # user_id -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ

TARIFFS = {
    "1 –º–µ—Å—è—Ü ‚Äî 100‚ÇΩ": 30,
    "3 –º–µ—Å—è—Ü–∞ ‚Äî 250‚ÇΩ (+–±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏)": 30*3,  # –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    "5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 400‚ÇΩ (+–±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏)": 30*5,
}

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    return f"10.0.0.{last_assigned_ip}"

def generate_wg_config(client_private_key: str, client_ip: str) -> str:
    return f"""[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–¢–∞—Ä–∏—Ñ—ã üí∞", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üéÅ", "–û–ø–ª–∞—Ç–∏–ª(–∞) ‚úÖ")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏–≤–∞–π, –∞ —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN. üöÄ",
        reply_markup=keyboard
    )

@dp.message_handler(lambda m: m.text == "–¢–∞—Ä–∏—Ñ—ã üí∞")
async def show_tariffs(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    for name in TARIFFS.keys():
        keyboard.add(types.InlineKeyboardButton(text=name, callback_data=f"tariff_{name}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'))
async def process_tariff_selection(callback_query: types.CallbackQuery):
    tariff_name = callback_query.data[len("tariff_"):]
    user_tariffs[callback_query.from_user.id] = tariff_name
    await bot.answer_callback_query(callback_query.id, text=f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff_name}")
    await bot.send_message(callback_query.from_user.id,
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariff_name}\n\n"
                           f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª(–∞) ‚úÖ¬ª, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –Ω–∞–º.")

@dp.message_handler(lambda m: m.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üéÅ")
async def referral_info(message: types.Message):
    user_id = message.from_user.id
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ–π –∏ —Å—Å—ã–ª–∫–æ–π
    referral_link = f"https://t.me/YourBotUsername?start={user_id}"  # –∑–∞–º–µ–Ω–∏—Ç–µ YourBotUsername
    await message.answer(
        f"üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã! üéÅ\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ! ‚è≥\n\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}"
    )

@dp.message_handler(lambda m: m.text == "–û–ø–ª–∞—Ç–∏–ª(–∞) ‚úÖ")
async def payment_confirm(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_fullname = message.from_user.full_name
    selected_tariff = user_tariffs.get(user_id, "–¢–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω")

    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    admin_msg = (
        f"üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:\n"
        f"üë§ {user_fullname} (@{username})\n"
        f"üÜî ID: {user_id}\n"
        f"‚è∞ –í—Ä–µ–º—è: {now_str}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {selected_tariff}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm {user_id} –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞."
    )

    await bot.send_message(ADMIN_CHAT_ID, admin_msg)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∂–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üî•")

@dp.message_handler(commands=['confirm'])
async def admin_confirm_payment(message: types.Message):
    # –û–∂–∏–¥–∞–µ—Ç—Å—è: /confirm <user_id>
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>")
        return

    try:
        user_id = int(args[1])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if user_id in issued_clients:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    client_private_key = generate_private_key()
    client_ip = generate_client_ip()

    issued_clients[user_id] = {
        "private_key": client_private_key,
        "ip": client_ip,
    }

    wg_config = generate_wg_config(client_private_key, client_ip)

    try:
        await bot.send_message(user_id,
            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í–æ—Ç –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard VPN:\n\n" + wg_config)
        await message.answer(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
