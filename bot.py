import asyncio
import secrets
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_GROUP_ID = -1002593269045
BOT_USERNAME = 'FastVpn_bot'

SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

issued_clients = {}
subscriptions = {}
last_assigned_ip = 1

TARIFFS = {
    "7 –¥–Ω–µ–π ‚Äî 99‚ÇΩ": 7,
    "30 –¥–Ω–µ–π ‚Äî 299‚ÇΩ": 30,
    "90 –¥–Ω–µ–π ‚Äî 699‚ÇΩ": 90,
}

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    return f"10.0.0.{last_assigned_ip}"

def generate_wg_config(client_private_key: str, client_ip: str) -> str:
    return f"""[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    ref = message.get_args()
    user_id = message.from_user.id
    if ref and ref.isdigit() and int(ref) != user_id:
        if user_id not in issued_clients:
            issued_clients[user_id] = {"referred_by": int(ref)}

    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì∂ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="choose_tariff"),
        InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_info")
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏–≤–∞–π, –∞ —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN. üöÄ",
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == 'choose_tariff')
async def show_tariffs(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    for name in TARIFFS:
        markup.add(InlineKeyboardButton(name, callback_data=f"pay_{name}"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def pay_tariff(callback: types.CallbackQuery):
    tariff = callback.data[4:]
    days = TARIFFS.get(tariff)
    user_id = callback.from_user.id
    text = (
        f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: *{tariff}*\n\n"
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª.\n"
        "–û–ø–ª–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –∫–∞—Ä—Ç—É): `1234 5678 9012 3456`\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ VPN-–¥–æ—Å—Ç—É–ø."
    )
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"confirm_request_{days}")
    )
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_request_"))
async def confirm_request(callback: types.CallbackQuery):
    days = int(callback.data.split("_")[2])
    user = callback.from_user
    await bot.send_message(
        ADMIN_GROUP_ID,
        f"üí∞ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
        f"üÜî ID: `{user.id}`\n"
        f"üìÖ –¢–∞—Ä–∏—Ñ: {days} –¥–Ω–µ–π\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        f"‚öôÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /confirm {user.id} {days}",
        parse_mode="Markdown"
    )
    await callback.message.edit_text("‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ñ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")

@dp.message_handler(commands=['confirm'])
async def admin_confirm(message: types.Message):
    parts = message.text.split()
    if len(parts) != 3:
        await message.reply("–§–æ—Ä–º–∞—Ç: /confirm <user_id> <–¥–Ω–µ–π>")
        return
    user_id = int(parts[1])
    days = int(parts[2])

    if user_id in subscriptions:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    private_key = generate_private_key()
    client_ip = generate_client_ip()
    config = generate_wg_config(private_key, client_ip)

    issued_clients[user_id] = {"private_key": private_key, "ip": client_ip}
    subscriptions[user_id] = {
        "expires": datetime.datetime.now() + datetime.timedelta(days=days)
    }

    referrer = issued_clients.get(user_id, {}).get("referred_by")
    if referrer:
        subscriptions.setdefault(referrer, {"expires": datetime.datetime.now()})
        subscriptions[referrer]["expires"] += datetime.timedelta(days=7)
        await bot.send_message(referrer, "üéâ –£—Ä–∞! –ó–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +7 –¥–Ω–µ–π VPN!")

    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í–æ—Ç –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard:\n\n```ini\n{config}```",
            parse_mode="Markdown"
        )
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

@dp.callback_query_handler(lambda c: c.data == 'referral_info')
async def referral_info(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    await callback.message.answer(
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π! –ó–∞ –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ *7 –¥–Ω–µ–π* VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ. üéÅ\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}",
        parse_mode="Markdown"
    )

async def notify_expirations():
    while True:
        now = datetime.datetime.now()
        for user_id, sub in list(subscriptions.items()):
            if (sub["expires"] - now).days == 1:
                try:
                    await bot.send_message(user_id, "üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
                except:
                    pass
            elif now >= sub["expires"]:
                try:
                    await bot.send_message(user_id, "‚õîÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.")
                    del subscriptions[user_id]
                except:
                    pass
        await asyncio.sleep(3600)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notify_expirations())
    executor.start_polling(dp, skip_updates=True)
