import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import asyncio
import logging
import random
import string
from datetime import datetime, timedelta

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

ADMIN_ID = 7231676236  # –ê–¥–º–∏–Ω ID

TARIFFS = {
    "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3m": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5m": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 399, "days": 150}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã SQLite
conn = sqlite3.connect("fastvpn.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    ref TEXT,
    vpn_key TEXT,
    paid INTEGER DEFAULT 0,
    plan TEXT,
    payment_time TEXT
)
''')
conn.commit()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ VPN –∫–ª—é—á–∞
def generate_vpn_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
def upsert_user(user_id, ref=None, paid=0, plan=None, payment_time=None, vpn_key=None):
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (user_id, ref, paid, plan, payment_time, vpn_key) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, ref, paid, plan, payment_time, vpn_key)
        )
    else:
        cursor.execute(
            "UPDATE users SET ref = ?, paid = ?, plan = ?, payment_time = ?, vpn_key = ? WHERE user_id = ?",
            (ref, paid, plan, payment_time, vpn_key, user_id)
        )
    conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id):
    cursor.execute("SELECT user_id, ref, vpn_key, paid, plan, payment_time FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        return {
            "user_id": row[0],
            "ref": row[1],
            "vpn_key": row[2],
            "paid": bool(row[3]),
            "plan": row[4],
            "payment_time": datetime.fromisoformat(row[5]) if row[5] else None
        }
    else:
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscription_active(user_data):
    if not user_data or not user_data["paid"] or not user_data["payment_time"] or not user_data["plan"]:
        return False
    plan_days = TARIFFS[user_data["plan"]]["days"]
    expiry_date = user_data["payment_time"] + timedelta(days=plan_days)
    return datetime.now() < expiry_date

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_welcome_text(user: types.User):
    ref_link = f"https://t.me/FastVpn_bot_bot?start={user.id}"
    return (
        f"‚ú®üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ FastVPN ‚Äî —Ç–≤–æ—ë–º –Ω–∞–¥—ë–∂–Ω–æ–º —Å–ø—É—Ç–Ω–∏–∫–µ –≤ –º–∏—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</b> üëã‚ú®\n\n"
        f"–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        f"üåê –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–∞–π—Ç–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º, –≥–¥–µ –±—ã —Ç—ã –Ω–∏ –±—ã–ª\n"
        f"üîí –ê–±—Å–æ–ª—é—Ç–Ω—É—é –∑–∞—â–∏—Ç—É –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        f"üì± –ü–æ–¥–¥–µ—Ä–∂–∫—É iPhone –∏ Android —Å —É–¥–æ–±–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏\n"
        f"üíé –ü—Ä–æ—Å—Ç–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∑–∞–º–æ—Ä–æ—á–µ–∫\n\n"
        f"üìä <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>\n"
        f"üóìÔ∏è 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ\n"
        f"üóìÔ∏è 3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ\n"
        f"üóìÔ∏è 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399‚ÇΩ\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π 3 –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        f"–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<a href='{ref_link}'>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ —ç–∫–æ–Ω–æ–º—å!</a>\n\n"
        f"üì≤ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è FastVPN? –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!</b>\n"
        f"1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—à—å —Ç–∞—Ä–∏—Ñ\n"
        f"2Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ—à—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        f"3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π VPN-–∫–ª—é—á ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π!\n"
        f"4Ô∏è‚É£ –í—Å—Ç–∞–≤–ª—è–µ—à—å –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ—à—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!\n\n"
        f"üí≥ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ —É–≤–∏–¥–∏—à—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        f"‚¨áÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª\n"
        f"üîî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–∏—à–ª—ë—Ç —Ç–µ–±–µ –∫–ª—é—á\n\n"
        f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVPN! –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å —Ç–æ–±–æ–π! üåü"
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.insert(InlineKeyboardButton(text=f"{t['name']} ‚Äî {t['price']}‚ÇΩ", callback_data=f"tariff_{key}"))
    kb.add(InlineKeyboardButton(text="üì≤ –°–∫–∞—á–∞—Ç—å –¥–ª—è iPhone", url="https://apps.apple.com/app/outline-vpn/id1356177741"))
    kb.add(InlineKeyboardButton(text="ü§ñ –°–∫–∞—á–∞—Ç—å –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client"))
    return kb

# –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏–ª(–∞)"
def paid_button():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    return kb

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
def admin_confirm_button(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}"))
    return kb

# /start –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    ref_id = message.get_args() if message.get_args() else None

    existing_user = get_user(user.id)
    if existing_user is None:
        upsert_user(user.id, ref=ref_id)
    else:
        # –û–±–Ω–æ–≤–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å —Å—Å—ã–ª–∫–æ–π
        if ref_id and existing_user["ref"] is None:
            upsert_user(user.id, ref=ref_id, paid=existing_user["paid"], plan=existing_user["plan"],
                        payment_time=existing_user["payment_time"].isoformat() if existing_user["payment_time"] else None,
                        vpn_key=existing_user["vpn_key"])

    text = get_welcome_text(user)
    await message.answer(text, parse_mode='HTML', disable_web_page_preview=True, reply_markup=main_menu_keyboard())

# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'))
async def process_tariff(callback_query: types.CallbackQuery):
    tariff_key = callback_query.data[len("tariff_"):]
    if tariff_key not in TARIFFS:
        await callback_query.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    user_data = get_user(callback_query.from_user.id)
    if user_data and user_data["paid"]:
        await callback_query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    tariff = TARIFFS[tariff_key]
    upsert_user(callback_query.from_user.id, plan=tariff_key, paid=0, payment_time=None, vpn_key=None)
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff['name']}</b> –∑–∞ <b>{tariff['price']}‚ÇΩ</b>.\n\n"
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"+7 932 222 99 30 (Ozon Bank)\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à VPN-–∫–ª—é—á."
    )
    await callback_query.message.edit_text(text, parse_mode='HTML', reply_markup=paid_button())
    await callback_query.answer()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û–ø–ª–∞—Ç–∏–ª(–∞)"
@dp.callback_query_handler(lambda c: c.data == "paid")
async def process_paid(callback_query: types.CallbackQuery):
    user_data = get_user(callback_query.from_user.id)
    if not user_data or not user_data.get("plan"):
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
        return

    if user_data["paid"]:
        await callback_query.answer("–£ –≤–∞—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª
    plan_name = TARIFFS[user_data["plan"]]["name"]
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    msg = (
        f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username or user_data['user_id']} "
        f"(ID: {user_data['user_id']}) –∑–∞—è–≤–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.\n"
        f"–¢–∞—Ä–∏—Ñ: {plan_name}\n"
        f"–í—Ä–µ–º—è: {time_now}"
    )
    await bot.send_message(ADMIN_ID, msg, reply_markup=admin_confirm_button(user_data['user_id']))
    await callback_query.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_"))
async def process_admin_confirm(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É.")
        return

    user_id = int(callback
