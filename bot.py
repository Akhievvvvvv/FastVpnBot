import logging
import random
import string
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import aiosqlite

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_ID = 7231676236  # –¢–≤–æ–π user_id
ADMIN_GROUP_ID = -1002593269045  # ID –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3m": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5m": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 399, "days": 150}
}

DB_PATH = "fastvpn_users.db"

# ------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# ------------------------

async def db_init():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            ref TEXT,
            paid INTEGER DEFAULT 0,
            plan TEXT,
            payment_time TEXT,
            vpn_key TEXT,
            free_days INTEGER DEFAULT 0,
            free_days_expiry TEXT
        )''')
        await db.commit()

async def add_user(user_id: int, username: str, ref: str = None):
    async with aiosqlite.connect(DB_PATH) as db:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, ref) VALUES (?, ?, ?)",
            (user_id, username, ref)
        )
        await db.commit()

async def set_user_plan(user_id: int, plan: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET plan = ? WHERE user_id = ?", (plan, user_id))
        await db.commit()

async def set_user_paid(user_id: int, paid: bool):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET paid = ? WHERE user_id = ?", (1 if paid else 0, user_id))
        await db.commit()

async def set_payment_time(user_id: int, payment_time: datetime):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET payment_time = ? WHERE user_id = ?", (payment_time.isoformat(), user_id))
        await db.commit()

async def set_vpn_key(user_id: int, key: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET vpn_key = ? WHERE user_id = ?", (key, user_id))
        await db.commit()

async def add_free_days(user_id: int, days: int):
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ free_days –∏ free_days_expiry
        cursor = await db.execute("SELECT free_days, free_days_expiry FROM users WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()
        now = datetime.utcnow()
        if row:
            current_days = row[0] or 0
            expiry_str = row[1]
            if expiry_str:
                expiry = datetime.fromisoformat(expiry_str)
                if expiry > now:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º free_days –∏ –æ–±–Ω–æ–≤–ª—è–µ–º expiry
                    new_expiry = expiry + timedelta(days=days)
                    new_days = current_days + days
                else:
                    # –ò—Å—Ç—ë–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                    new_expiry = now + timedelta(days=days)
                    new_days = days
            else:
                new_expiry = now + timedelta(days=days)
                new_days = days
        else:
            new_expiry = now + timedelta(days=days)
            new_days = days

        await db.execute(
            "UPDATE users SET free_days = ?, free_days_expiry = ? WHERE user_id = ?",
            (new_days, new_expiry.isoformat(), user_id)
        )
        await db.commit()

async def get_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT user_id, username, ref, paid, plan, payment_time, vpn_key, free_days, free_days_expiry FROM users WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()
        return row

async def get_user_by_referral(ref_user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT user_id FROM users WHERE ref = ?", (str(ref_user_id),))
        rows = await cursor.fetchall()
        return [r[0] for r in rows]

# ------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ------------------------

def generate_vpn_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

def get_welcome_text(user: types.User):
    ref_link = f"https://t.me/FastVpn_bot_bot?start={user.id}"
    text = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ú®üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVPN!</b> üëã‚ú®\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"

        "üîπ <b>–ü–æ—á–µ–º—É FastVPN?</b>\n"
        "üåê –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "üîí –ó–∞—â–∏—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ iPhone –∏ Android\n"
        "üíé –õ–µ–≥–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n\n"

        "üìä <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        "üóìÔ∏è 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ\n"
        "üóìÔ∏è 3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ\n"
        "üóìÔ∏è 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399‚ÇΩ\n\n"

        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∏—Ö –ø–æ–∫—É–ø–∫–µ!\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<a href='{ref_link}'>–ù–∞–∂–º–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!</a>\n\n"

        "üì≤ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b>\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ\n"
        "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏ VPN-–∫–ª—é—á –∏ –ø–æ–ª—å–∑—É–π—Å—è!\n\n"

        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "+7 932 222 99 30 (Ozon Bank)\n\n"

        "üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª FastVPN! –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å —Ç–æ–±–æ–π! üåü"
    )
    return text

def main_menu_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.insert(InlineKeyboardButton(text=f"{t['name']} ‚Äî {t['price']}‚ÇΩ", callback_data=f"tariff_{key}"))
    kb.add(InlineKeyboardButton(text="üì≤ –°–∫–∞—á–∞—Ç—å –¥–ª—è iPhone", url="https://apps.apple.com/app/outline-vpn/id1356177741"))
    kb.add(InlineKeyboardButton(text="ü§ñ –°–∫–∞—á–∞—Ç—å –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client"))
    return kb

def paid_button():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    return kb

def admin_confirm_button(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}"))
    return kb

# ------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±–µ–∫–æ–≤
# ------------------------

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    ref_id = message.get_args() if message.get_args() else None
    if ref_id == str(user.id):
        # —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –Ω–µ –º–æ–≥ —Å–∞–º —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
        ref_id = None
    await add_user(user.id, user.username or "", ref_id)
    text = get_welcome_text(user)
    await message.answer(text, parse_mode='HTML', disable_web_page_preview=True, reply_markup=main_menu_keyboard())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'))
async def process_tariff(callback_query: types.CallbackQuery):
    tariff_key = callback_query.data[len("tariff_"):]
    if tariff_key not in TARIFFS:
        await callback_query.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return
    tariff = TARIFFS[tariff_key]
    user_id = callback_query.from_user.id
    await set_user_plan(user_id, tariff_key)
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff['name']}</b> –∑–∞ <b>{tariff['price']}‚ÇΩ</b>.\n\n"
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"+7 932 222 99 30 (Ozon Bank)\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à VPN-–∫–ª—é—á."
    )
    await callback_query.message.edit_text(text, parse_mode='HTML', reply_markup=paid_button())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "paid")
async def process_paid(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = await get_user(user_id)
    if not user_data or not user_data[4]:  # plan –Ω–µ –≤—ã–±—Ä–∞–Ω
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ –≥—Ä—É–ø–ø—É
    user_plan_key = user_data[4]
    tariff = TARIFFS.get(user_plan_key)
    payment_text = (
        f"üì¢ <b>–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: {user_id})\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {tariff['name']} –∑–∞ {tariff['price']}‚ÇΩ\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
    )
    await bot.send_message(ADMIN_GROUP_ID, payment_text, parse_mode='HTML', reply_markup=admin_confirm_button(user_id))
    await callback_query.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_"))
async def admin_confirm_payment(callback_query: types.CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if admin_user_id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    user_id_to_confirm = int(callback_query.data[len("confirm_"):])
    user_data = await get_user(user_id_to_confirm)
    if not user_data:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    if user_data[3] == 1:
        await callback_query.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    await set_user_paid(user_id_to_confirm, True)
    await set_payment_time(user_id_to_confirm, datetime.utcnow())

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN-–∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    vpn_key = generate_vpn_key()
    await set_vpn_key(user_id_to_confirm, vpn_key)

    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É +7 –¥–Ω–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä –∏ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    referrer_id = user_data[2]
    if referrer_id and referrer_id != str(user_id_to_confirm):
        try:
            ref_id_int = int(referrer_id)
            await add_free_days(ref_id_int, 7)
            # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
            try:
                await bot.send_message(ref_id_int,
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª —Ç–∞—Ä–∏—Ñ.")
            except Exception:
                pass
        except ValueError:
            pass  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ref –≤ –±–∞–∑–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
    await bot.send_message(user_id_to_confirm,
        f"‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"üîë –í–∞—à VPN-–∫–ª—é—á:\n<code>{vpn_key}</code>\n\n"
        f"üì≤ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline VPN –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! üåê")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    await callback_query.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ VPN-–∫–ª—é—á –≤—ã–¥–∞–Ω.", reply_markup=None)
    await callback_query.answer()

# ------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ------------------------

async def on_startup(_):
    await db_init()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
