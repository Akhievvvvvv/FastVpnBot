from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import asyncio
import logging
import random
import string
from datetime import datetime, timedelta

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
users = {}  # user_id: {'ref': str, 'key': str, 'paid': bool, 'plan': str, 'payment_time': datetime, 'expire_time': datetime}

# –¢–∞—Ä–∏—Ñ—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –¥–Ω—è—Ö
TARIFFS = {
    "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3m": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5m": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 399, "days": 150}
}

ADMIN_ID = 7231676236

def generate_vpn_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

def get_welcome_text(user: types.User):
    ref_link = f"https://t.me/FastVpn_bot_bot?start={user.id}"
    return (
        f"‚ú®üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ FastVPN ‚Äî —Ç–≤–æ—ë–º –Ω–∞–¥—ë–∂–Ω–æ–º —Å–ø—É—Ç–Ω–∏–∫–µ –≤ –º–∏—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</b> üëã‚ú®\n\n"
        f"–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        f"üåê –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–∞–π—Ç–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º\n"
        f"üîí –ê–±—Å–æ–ª—é—Ç–Ω—É—é –∑–∞—â–∏—Ç—É –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n"
        f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        f"üì± –ü–æ–¥–¥–µ—Ä–∂–∫—É iPhone –∏ Android\n"
        f"üíé –ü—Ä–æ—Å—Ç–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        f"üìä <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>\n"
        f"üóìÔ∏è 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ\n"
        f"üóìÔ∏è 3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ\n"
        f"üóìÔ∏è 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399‚ÇΩ\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π 3 –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        f"–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<a href='{ref_link}'>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ —ç–∫–æ–Ω–æ–º—å!</a>\n\n"
        f"üì≤ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è FastVPN?</b>\n"
        f"1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—à—å —Ç–∞—Ä–∏—Ñ\n"
        f"2Ô∏è‚É£ –û–ø–ª–∞—á–∏–≤–∞–µ—à—å –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        f"3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å –∫–ª—é—á ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        f"üí≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b> –∏ –∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVPN! üåü"
    )

def main_menu_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.insert(InlineKeyboardButton(text=f"{t['name']} ‚Äî {t['price']}‚ÇΩ", callback_data=f"tariff_{key}"))
    kb.add(InlineKeyboardButton(text="üì≤ –°–∫–∞—á–∞—Ç—å –¥–ª—è iPhone", url="https://apps.apple.com/app/outline-vpn/id1356177741"))
    kb.add(InlineKeyboardButton(text="ü§ñ –°–∫–∞—á–∞—Ç—å –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client"))
    return kb

def paid_button():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    return kb

def admin_confirm_button(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}"))
    return kb

def renew_button():
    kb = InlineKeyboardMarkup()
    for key, t in TARIFFS.items():
        kb.insert(InlineKeyboardButton(text=f"–ü—Ä–æ–¥–ª–∏—Ç—å {t['name']} ‚Äî {t['price']}‚ÇΩ", callback_data=f"renew_{key}"))
    return kb

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    if message.get_args():
        ref_id = message.get_args()
        users[user.id] = users.get(user.id, {"ref": ref_id, "paid": False, "key": None, "plan": None, "payment_time": None, "expire_time": None})
    else:
        users.setdefault(user.id, {"ref": None, "paid": False, "key": None, "plan": None, "payment_time": None, "expire_time": None})

    text = get_welcome_text(user)
    await message.answer(text, parse_mode='HTML', disable_web_page_preview=True, reply_markup=main_menu_keyboard())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'))
async def process_tariff(callback_query: types.CallbackQuery):
    tariff_key = callback_query.data[len("tariff_"):]
    if tariff_key not in TARIFFS:
        await callback_query.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return
    tariff = TARIFFS[tariff_key]
    user_id = callback_query.from_user.id
    users[user_id]["plan"] = tariff_key
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff['name']}</b> –∑–∞ <b>{tariff['price']}‚ÇΩ</b>.\n\n"
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"+7 932 222 99 30 (Ozon Bank)\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à VPN-–∫–ª—é—á."
    )
    await callback_query.message.edit_text(text, parse_mode='HTML', reply_markup=paid_button())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "paid")
async def process_paid(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = users.get(user_id)
    if not user_data or not user_data.get("plan"):
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
        return
    if user_data["paid"]:
        await callback_query.answer("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–∞—Ä–∏—Ñ.")
        return

    plan_name = TARIFFS[user_data["plan"]]["name"]
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    msg = (
        f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username or user_id} (ID: {user_id}) "
        f"–∑–∞—è–≤–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.\n"
        f"–¢–∞—Ä–∏—Ñ: {plan_name}\n"
        f"–í—Ä–µ–º—è: {time_now}"
    )
    await bot.send_message(ADMIN_ID, msg, reply_markup=admin_confirm_button(user_id))
    await callback_query.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_"))
async def process_admin_confirm(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    if admin_id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É.")
        return

    user_id = int(callback_query.data[len("confirm_"):])
    user_data = users.get(user_id)
    if not user_data:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user_data["paid"]:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN –∫–ª—é—á
    vpn_key = generate_vpn_key()
    now = datetime.now()
    plan = user_data["plan"]
    expire = now + timedelta(days=TARIFFS[plan]["days"])

    user_data.update({
        "key": vpn_key,
        "paid": True,
        "payment_time": now,
        "expire_time": expire
    })

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Outline API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–ø—Å–µ–≤–¥–æ–∫–æ–¥)
    # add_key_to_outline_server(vpn_key, user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ FastVPN!</b>\n\n"
        f"–í–æ—Ç –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π VPN-–∫–ª—é—á:\n\n"
        f"<
