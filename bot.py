import logging
import asyncio
import secrets
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_GROUP_ID = -1002593269045
REKVIZITY = "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É: <code>89322229930</code> (Ozon –ë–∞–Ω–∫)"

SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

user_states = {}
user_refs = {}
user_subscriptions = {}
issued_configs = {}
last_ip = 2

# ‚Äî‚Äî‚Äî –ö–Ω–æ–ø–∫–∏ ‚Äî‚Äî‚Äî
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üíº –¢–∞—Ä–∏—Ñ—ã", "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥—ã ‚Äî‚Äî‚Äî
@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    ref = msg.get_args()
    uid = msg.from_user.id
    user_refs.setdefault(uid, {"referred_by": None, "referrals": []})
    if ref and ref.isdigit() and int(ref) != uid:
        user_refs[uid]["referred_by"] = int(ref)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏–≤–∞–π, –∏ —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN. üöÄ"
    )
    await msg.answer(text, reply_markup=main_kb)

# ‚Äî‚Äî‚Äî –í—ã–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üíº –¢–∞—Ä–∏—Ñ—ã")
async def send_tariffs(msg: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ", callback_data="buy_1"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ", callback_data="buy_3"),
        InlineKeyboardButton("5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 449‚ÇΩ", callback_data="buy_5"),
    )
    await msg.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)

# ‚Äî‚Äî‚Äî –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ ‚Äî‚Äî‚Äî
@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def handle_buy(call: types.CallbackQuery):
    period = int(call.data.split("_")[1])
    prices = {1: "99‚ÇΩ", 3: "249‚ÇΩ", 5: "449‚ÇΩ"}
    text = (
        f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{period} –º–µ—Å.</b> ‚Äî <b>{prices[period]}</b>\n\n"
        f"{REKVIZITY}\n\n"
        "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{period}"))
    await call.message.edit_text(text, reply_markup=kb)
    user_states[call.from_user.id] = {"tarif": f"{period} –º–µ—Å—è—Ü ‚Äî {prices[period]}", "months": period}

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã ‚Äî‚Äî‚Äî
@dp.callback_query_handler(lambda c: c.data.startswith("paid_"))
async def handle_paid(call: types.CallbackQuery):
    uid = call.from_user.id
    username = call.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    tarif = user_states[uid]["tarif"]
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    text = (
        "üí∏ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂:</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üÜî ID: <code>{uid}</code>\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {tarif}\n"
        f"‚è∞ –í—Ä–µ–º—è: {now}"
    )

    confirm_kb = InlineKeyboardMarkup()
    confirm_kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{uid}"))
    await bot.send_message(chat_id=ADMIN_GROUP_ID, text=text, reply_markup=confirm_kb)
    await call.message.edit_text("‚úÖ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

# ‚Äî‚Äî‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ‚Äî‚Äî‚Äî
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def confirm_user(call: types.CallbackQuery):
    uid = int(call.data.split("_")[1])
    if uid in issued_configs:
        await call.answer("–£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        return

    global last_ip
    ip = f"10.0.0.{last_ip}"
    last_ip += 1
    private_key = secrets.token_urlsafe(32)

    config = (
        f"[Interface]\nPrivateKey = {private_key}\nAddress = {ip}/24\nDNS = 1.1.1.1\n\n"
        f"[Peer]\nPublicKey = {SERVER_PUBLIC_KEY}\nEndpoint = {SERVER_IP}:{SERVER_PORT}\n"
        "AllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25"
    )
    await bot.send_message(uid, f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n–í–æ—Ç –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard:\n\n<pre>{config}</pre>")
    issued_configs[uid] = True

    # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
    ref_info = user_refs.get(uid, {})
    inviter = ref_info.get("referred_by")
    if inviter:
        bonus_end = datetime.now() + timedelta(days=7)
        user_subscriptions[inviter] = bonus_end
        await bot.send_message(inviter, "üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã +7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!")

    # –ü–æ–¥–ø–∏—Å–∫–∞
    months = user_states[uid]["months"]
    sub_end = datetime.now() + timedelta(days=30 * months)
    user_subscriptions[uid] = sub_end

# ‚Äî‚Äî‚Äî –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def show_ref(msg: types.Message):
    uid = msg.from_user.id
    link = f"https://t.me/FastVpn_bot_bot?start={uid}"
    await msg.answer(
        f"üéØ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +7 –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ!\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{link}</code>"
    )

# ‚Äî‚Äî‚Äî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî‚Äî‚Äî
async def reminder_loop():
    while True:
        now = datetime.now()
        for uid, end_date in list(user_subscriptions.items()):
            if (end_date - now).days == 3:
                await bot.send_message(uid, "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –ü–æ—Ä–∞ –ø—Ä–æ–¥–ª–∏—Ç—å!")
        await asyncio.sleep(86400)

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    executor.start_polling(dp, skip_updates=True)
