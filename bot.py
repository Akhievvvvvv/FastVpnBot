import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# --- –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ---
BOT_TOKEN = "8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8"
ADMIN_CHAT_ID = -1002593269045  # –¢–≤–æ—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞

OUTLINE_API_URL = "https://109.196.100.159:7235/gip-npAdi0GP2xswd_f9Nw"
OUTLINE_CERT_SHA256 = "2065D8741DB5F2DD3E9A4C6764F55ECAD1B76FBADC33E1FAF7AD1A21AC163131"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–∞–π –ë–î)
users = {}        # user_id -> dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
payments = {}     # user_id -> —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ("pending", "confirmed")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ Outline VPN —á–µ—Ä–µ–∑ API ---
async def create_outline_key(name: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª—é—á Outline VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º –∏ —Å—Å—ã–ª–∫–æ–π.
    """
    async with aiohttp.ClientSession() as session:
        headers = {
            "Content-Type": "application/json",
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á (–ø–∞—Ä—Å–∏–º JSON –∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º API Outline)
        url = f"{OUTLINE_API_URL}/access-keys"
        payload = {
            "name": name
        }

        # –û–±—Ö–æ–¥ –æ—à–∏–±–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ TLS - –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å verify SSL,
        # –Ω–æ —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –ª—É—á—à–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Outline
        async with session.post(url, json=payload, ssl=False) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data
            else:
                text = await resp.text()
                raise Exception(f"–û—à–∏–±–∫–∞ Outline API: {resp.status} {text}")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs"),
        InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="show_referral"),
    )
    kb.add(InlineKeyboardButton("‚öôÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate_bot"))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"paid": False, "key_id": None, "access_url": None, "referrals": []}

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n\n"
        "–Ø ‚Äî –±–æ—Ç FastVPN.\n"
        "‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ –≤—ã–¥–∞—é —Ä–∞–±–æ—á–∏–µ VPN –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ Outline.\n"
        "üîê –ó–∞—â–∏—â–∞–π —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_kb(),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "show_tariffs")
async def show_tariffs(callback_query: types.CallbackQuery):
    text = (
        "üíé –¢–∞—Ä–∏—Ñ—ã FastVPN:\n\n"
        "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî 7 –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî 99‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /pay"
    )
    await callback_query.answer()
    await callback_query.message.edit_text(text)

@dp.callback_query_handler(lambda c: c.data == "show_referral")
async def show_referral(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = users.get(user_id, {})
    ref_link = f"https://t.me/FastVpn_bot_bot?start={user_id}"
    refs = user.get("referrals", [])
    text = (
        f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{ref_link}</code>\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: {len(refs)}"
    )
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"),
    )
    await callback_query.answer()
    await callback_query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await start_handler(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "activate_bot")
async def activate_bot(callback_query: types.CallbackQuery):
    text = (
        "‚öôÔ∏è –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å FastVPN:\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ Telegram Business.\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Üí –ß–∞—Ç-–±–æ—Ç—ã.\n"
        "3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @FastVpn_bot_bot —Ç—É–¥–∞.\n"
        "4Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∏—Ç–µ VPN –∫–ª—é—á.\n\n"
        "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! üöÄ"
    )
    await callback_query.answer()
    await callback_query.message.edit_text(text)

@dp.message_handler(commands=["pay"])
async def pay_handler(message: types.Message):
    user_id = message.from_user.id
    payments[user_id] = "pending"

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_pay_{user_id}")
    )
    await bot.send_message(ADMIN_CHAT_ID,
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{user_id}</a> —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
                           parse_mode="HTML", reply_markup=kb)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=None)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_pay_"))
async def confirm_pay(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    if admin_id != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É.", show_alert=True)
        return
    user_id = int(callback_query.data.split("_")[-1])
    if payments.get(user_id) != "pending":
        await callback_query.answer("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    payments[user_id] = "confirmed"
    users[user_id]["paid"] = True

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á Outline
    try:
        key_data = await create_outline_key(f"User-{user_id}")
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
        return

    users[user_id]["key_id"] = key_data["id"]
    users[user_id]["access_url"] = key_data["accessUrl"]

    await callback_query.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!", show_alert=True)
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb_user = InlineKeyboardMarkup(row_width=2)
    kb_user.add(
       
