import asyncio
import secrets
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_CHAT_ID = -1002593269045  # –¢–≤–æ—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞

# WireGuard server info
SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã
TARIFFS = {
    "1": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "duration_days": 30},
    "3": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "duration_days": 90},
    "5": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 449, "duration_days": 150},
}

REKVIZITI = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\nüì± 89322229930 (Ozon –ë–∞–Ω–∫)"

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
users_data = {}  # user_id: {tariff, start_date, end_date, private_key, client_ip, referral_id}
issued_ips = set()
last_assigned_ip = 1

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    ip = f"10.0.0.{last_assigned_ip}"
    while ip in issued_ips:
        last_assigned_ip += 1
        ip = f"10.0.0.{last_assigned_ip}"
    issued_ips.add(ip)
    return ip

def generate_wg_config(private_key: str, client_ip: str) -> str:
    return (
        f"[Interface]\n"
        f"PrivateKey = {private_key}\n"
        f"Address = {client_ip}/24\n"
        f"DNS = 1.1.1.1\n\n"
        f"[Peer]\n"
        f"PublicKey = {SERVER_PUBLIC_KEY}\n"
        f"Endpoint = {SERVER_IP}:{SERVER_PORT}\n"
        f"AllowedIPs = 0.0.0.0/0, ::/0\n"
        f"PersistentKeepalive = 25\n"
    )

def format_referral_link(user_id: int) -> str:
    return f"https://t.me/YourBotUsername?start=ref{user_id}"

def format_subscription_dates(start: datetime, end: datetime) -> str:
    return f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: —Å {start.strftime('%d.%m.%Y')} –ø–æ {end.strftime('%d.%m.%Y')}"

async def send_tariffs(message: types.Message):
    text = (
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏ VPN:\n\n"
        "üîπ 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ\n"
        "üîπ 3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ\n"
        "üîπ 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 449‚ÇΩ\n\n"
        f"{REKVIZITI}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂.\n"
        "–ï—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!"
    )
    buttons = ["1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞", "5 –º–µ—Å—è—Ü–µ–≤", "–û–ø–ª–∞—Ç–∏–ª(–∞)", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"]
    await message.answer(text)
    for b in buttons:
        await message.answer(b)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    args = message.get_args()
    referral_id = None
    if args.startswith("ref"):
        try:
            referral_id = int(args[3:])
        except:
            referral_id = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ —Å–∞–º —Å–µ–±—è)
    if referral_id and referral_id != user_id:
        if user_id not in users_data:
            users_data[user_id] = {}
        users_data[user_id]['referral_id'] = referral_id

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏–≤–∞–π, –∞ —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN. üöÄ"
    )
    await send_tariffs(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è)
@dp.message_handler()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
    if text in ["1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞", "5 –º–µ—Å—è—Ü–µ–≤"]:
        # –ù–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        selected = None
        for k, v in TARIFFS.items():
            if v['name'] == text:
                selected = k
                break
        if not selected:
            await message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if user_id not in users_data:
            users_data[user_id] = {}
        users_data[user_id]['selected_tariff'] = selected
        await message.answer(
            f"–¢—ã –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ: {TARIFFS[selected]['name']} –∑–∞ {TARIFFS[selected]['price']}‚ÇΩ.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n{REKVIZITI}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–ª–∞—Ç—ë–∂."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û–ø–ª–∞—Ç–∏–ª(–∞)"
    if text == "–û–ø–ª–∞—Ç–∏–ª(–∞)":
        if user_id not in users_data or 'selected_tariff' not in users_data[user_id]:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ.")
            return
        tariff_id = users_data[user_id]['selected_tariff']
        tariff_name = TARIFFS[tariff_id]['name']
        now = datetime.now()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        admin_text = (
            f"üì¢ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ ID: {user_id}\n"
            f"üïí –í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff_name}\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç –±–æ—Ç–∞:\n"
            f"/confirm {user_id}"
        )
        await bot.send_message(ADMIN_CHAT_ID, admin_text)
        await message.answer("–°–ø–∞—Å–∏–±–æ, –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
        ref_link = format_referral_link(user_id)
        bonus_text = (
            "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n"
            "–ï—Å–ª–∏ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∫—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç VPN ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
            "–ü–æ–¥–µ–ª–∏—Å—å –µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!"
        )
        await message.answer(bonus_text)
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞¬ª.")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º
@dp.message_handler(commands=['confirm'])
async def admin_confirm(message: types.Message):
    # –§–æ—Ä–º–∞—Ç: /confirm <user_id>
    if message.chat.id != ADMIN_CHAT_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>")
        return
    try:
        user_id = int(args[1])
    except:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π user_id.")
        return

    if user_id not in users_data or 'selected_tariff' not in users_data[user_id]:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ –≤—ã–±–∏—Ä–∞–ª —Ç–∞—Ä–∏—Ñ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if 'vpn_config' in users_data[user_id]:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –≤—ã–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
        return

    tariff_id = users_data[user_id]['selected_tariff']
    tariff = TARIFFS[tariff_id]
    now = datetime.now()
    start = now
    end = now + timedelta(days=tariff['duration_days'])

    private_key = generate_private_key()
    client_ip = generate_client_ip()
    wg_config = generate_wg_config(private_key, client_ip)

    users_data[user_id].update({
        "start_date": start,
        "end_date": end,
        "private_key": private_key,
        "client_ip": client_ip,
        "vpn_config": wg_config,
        "tariff": tariff,
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ñ–∏–≥
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–≤–æ–π VPN –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            f"{tariff['name']} ‚Äî {tariff['price']}‚ÇΩ\n"
            f"{format_subscription_dates(start, end)}\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –≤—Å—Ç–∞–≤—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard:\n\n"
            f"{wg_config}"
        )
        await message.answer(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    referral_id = users_data[user_id].get('referral_id')
    if referral_id and referral_id in users_data:
        # –î–æ–±–∞–≤–ª—è–µ–º +7 –¥–Ω–µ–π –±–æ–Ω—É—Å–∞ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—É
        ref_user = users_data[referral_id]
        old_end = ref_user.get('end_date', now)
        if old_end < now:
            old_end = now
        new_end = old_end + timedelta(days=7)
        ref_user['end_date'] = new_end
        try:
            await bot.send_message(referral_id,
                "üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π VPN –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! "
                f"–ù–æ–≤—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {new_end.strftime('%d.%m.%Y')}")
        except:
            pass

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
async def remind_task():
    while True:
        now = datetime.now()
        for user_id, data in users_data.items():
            end = data.get('end_date')
            if not end:
                continue
            days_left = (end - now).days
            if days_left == 3:
                try:
                    await bot.send_message(user_id,
                        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è ({end.strftime('%d.%m.%Y')}). "
                        "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–¥–ª–∏—Ç—å VPN!")
                except:
                    pass
        await asyncio.sleep(24*3600)  # –ñ–¥–µ–º 24 —á–∞—Å–∞

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(remind_task())
    executor.start_polling(dp, skip_updates=True)
