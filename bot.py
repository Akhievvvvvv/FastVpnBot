import asyncio
import secrets
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from datetime import datetime

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_CHAT_ID = -1002593269045  # –¢–≤–æ—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞

# WireGuard —Å–µ—Ä–≤–µ—Ä
SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "1 –º–µ—Å ‚Äî 99‚ÇΩ": 99,
    "3 –º–µ—Å ‚Äî 249‚ÇΩ": 249,
    "5 –º–µ—Å ‚Äî 449‚ÇΩ": 449,
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏) –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∑–∞–º–µ–Ω–∏ –Ω–∞ –ë–î –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
issued_clients = {}
last_assigned_ip = 1
user_subscriptions = {}  # user_id: {tariff, expire_date, referral_bonus_days}
user_referrals = {}  # user_id: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, user_id)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ (ReplyKeyboardMarkup)
tariff_buttons = [KeyboardButton(t) for t in TARIFFS.keys()]
tariffs_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*tariff_buttons).add(KeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    return f"10.0.0.{last_assigned_ip}"

def generate_wg_config(client_private_key: str, client_ip: str) -> str:
    return f"""[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""

def create_wg_file_content(private_key, client_ip):
    return generate_wg_config(private_key, client_ip).encode('utf-8')

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_referrals[message.from_user.id] = str(message.from_user.id)  # –ø—Ä–æ—Å—Ç–æ —é–∑–µ—ÄID - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É VPN ‚Äî –≤—Å—ë –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ! üöÄ\n\n"
        "üëâ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ:"
    )
    await message.answer(text, reply_markup=tariffs_kb)

@dp.message_handler(lambda m: m.text in TARIFFS)
async def tariff_chosen(message: types.Message):
    tariff_name = message.text
    price = TARIFFS[tariff_name]
    user_id = message.from_user.id

    payment_text = (
        f"üí∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: *{tariff_name}*\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *{price}‚ÇΩ* –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"üì± –ù–æ–º–µ—Ä: *89322229930*\n"
        f"üè¶ –ë–∞–Ω–∫: *Ozon –ë–∞–Ω–∫*\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û–ø–ª–∞—Ç–∏–ª(–∞)* –Ω–∏–∂–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN.\n\n"
        "–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –ø–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –±–æ–Ω—É—Å–∞! üéÅ"
    )
    pay_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–û–ø–ª–∞—Ç–∏–ª(–∞)")).add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ –ø–∞–º—è—Ç–∏)
    user_subscriptions[user_id] = {"tariff": tariff_name, "paid": False}
    
    await message.answer(payment_text, parse_mode='Markdown', reply_markup=pay_kb)

@dp.message_handler(lambda m: m.text == "–û–ø–ª–∞—Ç–∏–ª(–∞)")
async def payment_confirm(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.full_name

    if user_id not in user_subscriptions or user_subscriptions[user_id].get("paid", False):
        await message.answer("‚ùå –í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏.")
        return

    tariff = user_subscriptions[user_id]["tariff"]
    price = TARIFFS[tariff]
    time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–æ–π –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    confirm_kb = InlineKeyboardMarkup(row_width=1)
    confirm_kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}"))

    notify_text = (
        f"üí∏ *–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂:*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_name}\n"
        f"üÜî ID: {user_id}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff}\n"
        f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_str}"
    )

    await bot.send_message(ADMIN_CHAT_ID, notify_text, parse_mode='Markdown', reply_markup=confirm_kb)
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=tariffs_kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_"))
async def confirm_payment_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    admin_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –Ω–∞–∂–∞–ª (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É admin_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if admin_id != ADMIN_CHAT_ID and admin_id != callback_query.message.chat.id:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—ã.")
        return

    if user_id not in user_subscriptions:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user_subscriptions[user_id].get("paid", False):
        await callback_query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ IP
    client_private_key = generate_private_key()
    client_ip = generate_client_ip()

    issued_clients[user_id] = {
        "private_key": client_private_key,
        "ip": client_ip,
        "tariff": user_subscriptions[user_id]["tariff"],
    }

    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ
    user_subscriptions[user_id]["paid"] = True

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ —Ñ–∞–π–ª
    wg_config_str = generate_wg_config(client_private_key, client_ip)
    wg_config_bytes = wg_config_str.encode('utf-8')
    filename = f"vpn_{user_id}.conf"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–æ–º + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    instr_text = (
        "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
        "üìÅ –í–æ—Ç –≤–∞—à VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n\n"
        "üì≤ –ï—Å–ª–∏ —É –≤–∞—Å Android –∏–ª–∏ iOS, —Å–∫–∞—á–∞–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard:\n"
        " - Android: https://play.google.com/store/apps/details?id=com.wireguard.android\n"
        " - iOS: https://apps.apple.com/app/wireguard/id1441195209\n\n"
        "üîë –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏—Ç–µ VPN –æ–¥–Ω–∏–º —Ç–∞–ø–æ–º! –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –º–Ω–µ!"
    )

    try:
        await bot.send_document(user_id, types.InputFile.from_buffer(wg_config_bytes, filename))
        await bot.send_message(user_id, instr_text)
        await callback_query.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{issued_clients[user_id].get('username', user_id)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥ –≤—ã—Å–ª–∞–Ω.")
    except Exception as e:
        await callback_query.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
    await callback_query.message.edit_text(
        callback_query.message.text + "\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
    )
    await callback_query.message.edit_reply_markup(reply_markup=None)

@dp.message
