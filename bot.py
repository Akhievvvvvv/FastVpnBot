print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
import logging
logging.basicConfig(level=logging.INFO)
import asyncio
import secrets
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820
SERVER_INTERFACE = 'wg0'

ADMIN_GROUP_ID = -1002593269045
BOT_USERNAME = 'FastVpn_bot_bot'

bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

TARIFFS = {
    "1": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 449, "days": 150}
}

issued_clients = {}  # user_id: {–¥–∞–Ω–Ω—ã–µ}
last_assigned_ip = 2

REF_PREFIX = "ref_"

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    ip = f"10.0.0.{last_assigned_ip}"
    last_assigned_ip += 1
    return ip

def generate_wg_config(private_key, client_ip):
    return f"""[Interface]
PrivateKey = {private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
"""

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ—ã"))
    kb.add(KeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))
    return kb

def tariff_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for key, val in TARIFFS.items():
        kb.add(KeyboardButton(f"{val['name']} ‚Äî {val['price']}‚ÇΩ"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def payment_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    ref = None
    if message.get_args().startswith(REF_PREFIX):
        try:
            ref = int(message.get_args()[len(REF_PREFIX):])
        except:
            ref = None
    if user_id not in issued_clients:
        issued_clients[user_id] = {
            "ref_from": ref,
            "paid": False,
            "private_key": None,
            "ip": None,
            "tariff": None,
            "subscription_expire": None
        }
    welcome = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVPN! üîê\n\n"
        "üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏ <b>WireGuard</b>:\n"
        "‚Ä¢ Android: https://play.google.com/store/apps/details?id=com.wireguard.android\n"
        "‚Ä¢ iOS: https://apps.apple.com/app/wireguard/id1441195209\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—Ç–∏, –∏ —è –ø—Ä–∏—à–ª—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
        "üëá –í—ã–±–∏—Ä–∞–π –Ω–∏–∂–µ üëá"
    )
    await message.answer(welcome, reply_markup=main_menu())

@dp.message_handler(lambda m: m.text == "üí≥ –¢–∞—Ä–∏—Ñ—ã")
async def show_tariffs(message: types.Message):
    await message.answer("üíº –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_keyboard())

@dp.message_handler(lambda m: any(m.text == f"{v['name']} ‚Äî {v['price']}‚ÇΩ" for v in TARIFFS.values()))
async def selected_tariff(message: types.Message):
    user_id = message.from_user.id
    for key, val in TARIFFS.items():
        if message.text == f"{val['name']} ‚Äî {val['price']}‚ÇΩ":
            issued_clients[user_id]['tariff'] = key
            break
    await message.answer(
        f"üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        f"üßæ –¢–∞—Ä–∏—Ñ: {message.text}\n"
        f"üè¶ –ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∫–∞—Ä—Ç—É <b>Ozon –ë–∞–Ω–∫</b>:\n"
        f"<code>89322229930</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª</b> üëá",
        reply_markup=payment_keyboard()
    )

@dp.message_handler(lambda m: m.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
async def payment_confirmed(message: types.Message):
    user_id = message.from_user.id
    client = issued_clients.get(user_id)
    if not client or not client.get("tariff"):
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ.")
        return
    if client["paid"]:
        await message.answer("‚è≥ –£–∂–µ –∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    client["paid"] = True
    tariff = TARIFFS[client["tariff"]]
    msg = (
        f"üí∏ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂:</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
        f"üÜî ID: {user_id}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']} ‚Äî {tariff['price']}‚ÇΩ\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    confirm_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}")
    )
    await bot.send_message(ADMIN_GROUP_ID, msg, reply_markup=confirm_button)
    await message.answer("üïê –û–ø–ª–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞! –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üëÄ", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_"))
async def confirm_callback(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    client = issued_clients.get(user_id)
    if not client or not client["paid"]:
        await call.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", show_alert=True)
        return

    client["private_key"] = generate_private_key()
    client["ip"] = generate_client_ip()
    days = TARIFFS[client["tariff"]]["days"]
    client["subscription_expire"] = datetime.now() + timedelta(days=days)
    client["paid"] = False

    config_text = generate_wg_config(client["private_key"], client["ip"])
    filename = f"wg_{user_id}.conf"
    with open(filename, "w") as f:
        f.write(config_text)

    await bot.send_document(user_id, InputFile(filename), caption=(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        "üìÅ –ù–∏–∂–µ —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è WireGuard.\n"
        "üîå –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤–∫–ª—é—á–∏ VPN.\n\n"
        "üì≤ Android: https://play.google.com/store/apps/details?id=com.wireguard.android\n"
        "üçè iOS: https://apps.apple.com/app/wireguard/id1441195209\n\n"
        "üî• –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
    ))
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await call.message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}!")
    await call.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

@dp.message_handler(lambda m: m.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def referral_system(message: types.Message):
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{message.from_user.id}"
    await message.answer(
        f"üéÅ <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ +7 –¥–Ω–µ–π!</b>\n\n"
        f"üì® –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ –Ω–µ–π, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å üéâ"
    )

if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    executor.start_polling(dp, skip_updates=True)
