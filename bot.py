import logging
import random
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ª—É—á—à–µ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ç–∞–∫)
BOT_TOKEN = "8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8"
if not BOT_TOKEN:
    print("Error: BOT_TOKEN is not set!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

ADMIN_CHAT_ID = -1002593269045  # —Ç–≤–æ—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞
ADMIN_USER_ID = 7231676236      # —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

REF_BONUS_DAYS = 7
BONUS_3MONTH_DAYS = 15
roulette_days = [3, 5, 7, 10]

# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∞–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
CONFIGS = {
    'default': 'https://example.com/configs/default.ovpn',
    'fastvpn': 'https://example.com/configs/fastvpn.ovpn',
    'securevpn': 'https://example.com/configs/securevpn.ovpn',
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
users = {}
payments_pending = {}

FAQ_TEXT = (
    "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
    "1Ô∏è‚É£ –ö–∞–∫ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ.\n\n"
    "2Ô∏è‚É£ –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN?\n‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥'.\n\n"
    "3Ô∏è‚É£ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏?\n‚û°Ô∏è –ó–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
    "4Ô∏è‚É£ –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?\n‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'.\n"
)

WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç FastVPN üõ°Ô∏è\n"
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN —Å –±–æ–Ω—É—Å–∞–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.\n\n"
    "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"
)

def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü - 100‚ÇΩ", callback_data="buy_1m"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ + –±–æ–Ω—É—Å", callback_data="buy_3m"),
        InlineKeyboardButton("5 –º–µ—Å—è—Ü–µ–≤ - 400‚ÇΩ + –±–æ–Ω—É—Å", callback_data="buy_5m"),
    )
    kb.add(
        InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤", callback_data="roulette"),
        InlineKeyboardButton("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="change_config"),
    )
    kb.add(
        InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
        InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
    )
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {
            "subscription_until": None,
            "config": "default",
            "referrals": 0,
            "roulette_used": False,  # –û—Ç–º–µ—Ç–∫–∞, —á—Ç–æ —Ä—É–ª–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        }
    await message.answer(WELCOME_TEXT, reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if user_id not in users:
        users[user_id] = {
            "subscription_until": None,
            "config": "default",
            "referrals": 0,
            "roulette_used": False,
        }

    if data.startswith("buy_"):
        months = int(data.split("_")[1][0])  # 'buy_1m' -> 1, 'buy_3m' -> 3, 'buy_5m' -> 5
        price_map = {1: 100, 3: 250, 5: 400}
        price = price_map.get(months)
        if not price:
            await callback_query.answer("–û—à–∏–±–∫–∞ —Ç–∞—Ä–∏—Ñ–∞")
            return

        pay_text = (
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤) –∑–∞ {price}‚ÇΩ.\n"
            "–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã Ozon –ë–∞–Ω–∫–∞:\n"
            "+7 932 222-99-30\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."
        )
        payments_pending[user_id] = {
            "months": months,
            "price": price,
            "timestamp": datetime.now(),
        }
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid_confirm"))
        await callback_query.message.answer(pay_text, reply_markup=kb)
        await callback_query.answer()

    elif data == "paid_confirm":
        if user_id not in payments_pending:
            await callback_query.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –æ–ø–ª–∞—Ç—ã.", show_alert=True)
            return

        pay_info = payments_pending[user_id]

        confirm_text = (
            f"üõé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username or user_id} "
            f"–∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"‚Ä¢ {pay_info['months']} –º–µ—Å. –∑–∞ {pay_info['price']}‚ÇΩ\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {pay_info['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user_id}"))
        await bot.send_message(ADMIN_CHAT_ID, confirm_text, reply_markup=kb)

        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

    elif data.startswith("admin_confirm_"):
        admin_user_id = callback_query.from_user.id
        if admin_user_id != ADMIN_CHAT_ID and admin_user_id != ADMIN_USER_ID:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", show_alert=True)
            return
        uid = int(data.split("_")[-1])
        if uid not in payments_pending:
            await callback_query.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
            return
        pay_info = payments_pending.pop(uid)

        now = datetime.now()
        current_until = users.get(uid, {}).get("subscription_until")
        if current_until and current_until > now:
            new_until = current_until + timedelta(days=30*pay_info["months"])
        else:
            new_until = now + timedelta(days=30*pay_info["months"])

        bonus_days = 0
        if pay_info["months"] == 3:
            bonus_days += BONUS_3MONTH_DAYS
        bonus_days += REF_BONUS_DAYS * users.get(uid, {}).get("referrals", 0)
        new_until += timedelta(days=bonus_days)

        users.setdefault(uid, {})["subscription_until"] = new_until
        users[uid]["roulette_used"] = False  # –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ —Ä—É–ª–µ—Ç–∫–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é VPN —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        vpn_link = f"https://example.com/vpnconfig/{uid}.ovpn"

        try:
            await bot.send_message(
                uid,
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_until.strftime('%Y-%m-%d %H:%M:%S')}!\n"
                f"üéÅ –í–∫–ª—é—á–∞—è –±–æ–Ω—É—Å—ã {bonus_days} –¥–Ω–µ–π!\n\n"
                f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è VPN —Å—Å—ã–ª–∫–∞ –¥–ª—è Outline VPN:\n{vpn_link}\n\n"
                "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
            )
        except Exception:
            pass

        await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    elif data == "roulette":
        user = users.get(user_id)
        if not user or not user.get("subscription_until") or user["subscription_until"] < datetime.now():
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
            return
        if user.get("roulette_used", False):
            await callback_query.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä—É–ª–µ—Ç–∫—É –±–æ–Ω—É—Å–æ–≤.", show_alert=True)
            return

        reward_days = random.choice(roulette_days)
        user["subscription_until"] += timedelta(days=reward_days)
        user["roulette_used"] = True
        await callback_query.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {reward_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π!", show_alert=True)

    elif data == "change_config":
        user = users.get(user_id)
        current_config = user.get("config", "default")
        configs_kb = InlineKeyboardMarkup(row_width=1)
        for c in CONFIGS.keys():
            mark = "‚úÖ" if c == current_config else ""
            configs_kb.insert(InlineKeyboardButton(f"{c} {mark}", callback_data=f"set_config_{c}"))
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", reply_markup=configs_kb)
        await callback_query.answer()

    elif data.startswith("set_config_"):
        config_name = data.split("_")[-1]
        if config_name not in CONFIGS:
            await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        users[user_id]["config"] = config_name
        await callback_query.answer(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {config_name}.")
        await callback_query.message.answer(f"–¢–µ–ø–µ—Ä—å –≤–∞—à –∫–æ–Ω—Ñ–∏–≥: {config_name}\n–°—Å—ã–ª–∫–∞: {CONFIGS[config_name]}")

    elif data == "faq":
        await callback_query.message.answer(FAQ_TEXT, parse_mode="HTML")
        await callback_query.answer()

    elif data == "support":
        await callback_query.message.answer("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @YourSupportUsername")
        await callback_query.answer()

    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

if __name__ == "__main__":
    print("Bot started")
    asyncio.run(dp.start_polling())
