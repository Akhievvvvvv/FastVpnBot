# bot.py
import logging
import random
import string
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import aiosqlite

# ---------------- CONFIG ----------------
API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'  # <- –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 7231676236               # <- –≤–∞—à —é–∑–µ—Ä id (—Ç–æ—Ç, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã)
ADMIN_GROUP_ID = -1002593269045     # <- –≥—Ä—É–ø–ø–∞/—á–∞—Ç –∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–ª–∞—Ç–µ–∂–∏ (–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ADMIN_ID –¥–ª—è –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
BOT_USERNAME = "FastVpn_bot_bot"    # <- –∏–º—è –±–æ—Ç–∞ (–±–µ–∑ @)
DB_PATH = "fastvpn.db"
# ----------------------------------------

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3m": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5m": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 399, "days": 150}
}

# ---------------- DB ----------------
async def db_init():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            ref TEXT,
            paid INTEGER DEFAULT 0,
            plan TEXT,
            payment_time TEXT,
            vpn_key TEXT,
            subscription_end TEXT
        )''')
        await db.commit()

async def add_user(user_id: int, username: str, ref: str = None):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, username, ref) VALUES (?, ?, ?)",
                         (user_id, username, ref))
        await db.commit()

async def set_user_plan(user_id: int, plan: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET plan = ? WHERE user_id = ?", (plan, user_id))
        await db.commit()

async def set_user_paid_and_subscription(user_id: int, paid: bool, subscription_end: datetime, payment_time: datetime = None):
    pt = payment_time.isoformat() if payment_time else None
    se = subscription_end.isoformat() if subscription_end else None
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET paid = ?, payment_time = ?, subscription_end = ? WHERE user_id = ?",
                         (1 if paid else 0, pt, se, user_id))
        await db.commit()

async def set_vpn_key(user_id: int, key: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET vpn_key = ? WHERE user_id = ?", (key, user_id))
        await db.commit()

async def get_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id, username, ref, paid, plan, payment_time, vpn_key, subscription_end FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        return row

async def get_all_paid_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id, subscription_end FROM users WHERE paid = 1")
        rows = await cur.fetchall()
        return rows

# ---------------- Helpers ----------------
def generate_vpn_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=40))

def pretty_dt(iso_str: str):
    if not iso_str:
        return "‚Äî"
    try:
        dt = datetime.fromisoformat(iso_str)
        return dt.strftime("%Y-%m-%d %H:%M:%S UTC")
    except:
        return iso_str

def welcome_text(user: types.User):
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user.id}"
    return (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ú®üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVPN!</b> üëã‚ú®\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        "<b>–ü–æ—á–µ–º—É FastVPN?</b>\n"
        "üåê –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º\n"
        "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ iOS –∏ Android (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–Ω–∏–∑—É)\n\n"
        "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        "üóìÔ∏è 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ\n"
        "üóìÔ∏è 3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ\n"
        "üóìÔ∏è 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399‚ÇΩ\n\n"
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π, –µ—Å–ª–∏ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç —Ç–∞—Ä–∏—Ñ.\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a href='{ref_link}'>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</a>\n\n"
        "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –º–µ–Ω—é\n"
        "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)¬ª ‚Äî –∞–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π VPN-–∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n+7 932 222 99 30 (Ozon Bank)\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞.\n"
        "üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ FastVPN!"
    )

def main_menu_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.add(InlineKeyboardButton(f"{t['name']} ‚Äî {t['price']}‚ÇΩ", callback_data=f"tariff_{key}"))
    kb.add(InlineKeyboardButton("üì≤ –°–∫–∞—á–∞—Ç—å –¥–ª—è iPhone", url="https://apps.apple.com/app/outline-vpn/id1356177741"))
    kb.add(InlineKeyboardButton("ü§ñ –°–∫–∞—á–∞—Ç—å –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client"))
    kb.add(InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref_info"))
    return kb

def paid_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    return kb

def admin_confirm_kb(user_id: int):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}"))
    return kb

# ---------------- Handlers ----------------

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    args = message.get_args() or ""
    ref = None
    if args.startswith("ref_"):
        ref = args.split("ref_")[1]
        # –∑–∞—â–∏—Ç–∏–º—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ —Å–∞–º —Å–µ–±—è —Ä–µ—Ñ–∏—Ç—å
        if ref == str(message.from_user.id):
            ref = None
    await add_user(message.from_user.id, message.from_user.username or "", ref)
    await message.answer(welcome_text(message.from_user), disable_web_page_preview=True, reply_markup=main_menu_kb())

@dp.callback_query_handler(lambda c: c.data == "ref_info")
async def cb_ref_info(call: types.CallbackQuery):
    user = call.from_user
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user.id}"
    text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π " 
        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <a href='{ref_link}'>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å</a>\n\n"
        "–ü.–°. –ë–æ–Ω—É—Å –¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –æ–ø–ª–∞—Ç–∏—Ç –∏ –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É."
    )
    await call.answer()
    await call.message.answer(text, disable_web_page_preview=True)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("tariff_"))
async def cb_tariff(call: types.CallbackQuery):
    key = call.data.split("tariff_")[1]
    if key not in TARIFFS:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return
    t = TARIFFS[key]
    await set_user_plan(call.from_user.id, key)
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{t['name']}</b>\n–¶–µ–Ω–∞: <b>{t['price']}‚ÇΩ</b>\n\n"
        "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª.\n\n"
        "<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n+7 932 222 99 30 (Ozon Bank)\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –≤–∞—à –ª–∏—á–Ω—ã–π –∫–ª—é—á."
    )
    await call.answer()
    await call.message.edit_text(text, parse_mode='HTML', reply_markup=paid_kb())

@dp.callback_query_handler(lambda c: c.data == "paid")
async def cb_paid(call: types.CallbackQuery):
    user = await get_user(call.from_user.id)
    if not user or not user[4]:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return
    plan_key = user[4]
    t = TARIFFS.get(plan_key)
    if not t:
        await call.answer("–û—à–∏–±–∫–∞ —Ç–∞—Ä–∏—Ñ–∞.", show_alert=True)
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    username = user[1] or f"{call.from_user.id}"
    text = (f"üí∏ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {call.from_user.id})\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {t['name']} ‚Äî {t['price']}‚ÇΩ\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    try:
        await bot.send_message(ADMIN_GROUP_ID, text, parse_mode='HTML', reply_markup=admin_confirm_kb(call.from_user.id))
    except Exception:
        # –µ—Å–ª–∏ –æ—Ç—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –≤—ã—Å—ã–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(ADMIN_ID, text, parse_mode='HTML', reply_markup=admin_confirm_kb(call.from_user.id))
    await call.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_"))
async def cb_confirm(call: types.CallbackQuery):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å
    if call.from_user.id != ADMIN_ID:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.", show_alert=True)
        return

    try:
        target_id = int(call.data.split("confirm_")[1])
    except:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return

    user = await get_user(target_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    plan_key = user[4]
    if not plan_key or plan_key not in TARIFFS:
        await call.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return
    tariff = TARIFFS[plan_key]
    now = datetime.utcnow()

    # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–∞, –∏–Ω–∞—á–µ –æ—Ç now
    existing_end = None
    if user[7]:
        try:
            existing_end = datetime.fromisoformat(user[7])
        except:
            existing_end = None
    if existing_end and existing_end > now:
        new_end = existing_end + timedelta(days=tariff['days'])
    else:
        new_end = now + timedelta(days=tariff['days'])

    # –ø–æ–º–µ—á–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ —Å—Ä–æ–∫
    await set_user_paid_and_subscription(target_id, True, new_end, payment_time=now)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –Ω–µ—Ç
    vpn_key = user[6] or generate_vpn_key()
    await set_vpn_key(target_id, vpn_key)

    # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –µ–º—É +7 –¥–Ω–µ–π
    ref = user[2]  # —Å—Ç—Ä–æ–∫–∞
    if ref:
        try:
            ref_id = int(ref)
            # –Ω–µ –¥–∞—ë–º —Å–∞–º–æ–º—É —Å–µ–±–µ –±–æ–Ω—É—Å
            if ref_id != target_id:
                ref_user = await get_user(ref_id)
                # —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–µ—Ü —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                now2 = datetime.utcnow()
                if ref_user and ref_user[7]:
                    try:
                        ref_existing_end = datetime.fromisoformat(ref_user[7])
                    except:
                        ref_existing_end = None
                else:
                    ref_existing_end = None
                if ref_existing_end and ref_existing_end > now2:
                    ref_new_end = ref_existing_end + timedelta(days=7)
                else:
                    ref_new_end = now2 + timedelta(days=7)
                # –ø—Ä–∏–º–µ–Ω–∏–º –∏ (–µ—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –Ω–µ—Ç vpn_key) —Å–æ–∑–¥–∞–¥–∏–º
                await set_user_paid_and_subscription(ref_id, True, ref_new_end, payment_time=ref_user[5] and datetime.fromisoformat(ref_user[5]) or now2)
                if ref_user and not ref_user[6]:
                    # —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                    await set_vpn_key(ref_id, generate_vpn_key())
                # –æ–ø–æ–≤–µ—Å—Ç–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                try:
                    await bot.send_message(ref_id, "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /status.")
                except Exception:
                    pass
        except Exception:
            pass

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    try:
        await bot.send_message(target_id,
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"üîë –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π VPN-–∫–ª—é—á:\n<code>{vpn_key}</code>\n\n"
            "üì≤ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline (iOS / Android).\n"
            "2) –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á/activate –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á.\n"
            "3) –í–∫–ª—é—á–∏—Ç–µ VPN –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å.\n\n"
            f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{new_end.strftime('%Y-%m-%d %H:%M:%S UTC')}</b>\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
    except Exception:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).", show_alert=True)
        # –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
    try:
        await bot.send_message(ADMIN_GROUP_ID, f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_id}. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {new_end.strftime('%Y-%m-%d %H:%M:%S UTC')}.")
    except:
        pass

    await call.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∫–ª—é—á –≤—ã—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    try:
        # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ)
        await call.message.edit_reply_markup(None)
    except:
        pass

# /status
@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    paid = bool(user[3])
    plan = user[4] or "‚Äî"
    vpn_key = user[6] or "‚Äî"
    sub_end = pretty_dt(user[7])
    text = (
        "<b>üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"–ü–ª–∞–Ω: <b>{plan}</b>\n"
        f"–û–ø–ª–∞—á–µ–Ω–æ: <b>{'–î–∞' if paid else '–ù–µ—Ç'}</b>\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{sub_end}</b>\n\n"
        f"üîë –í–∞—à –∫–ª—é—á: <code>{vpn_key}</code>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await message.reply(text)

# ---------------- Background tasks ----------------

async def subscription_watcher():
    await asyncio.sleep(5)  # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    while True:
        try:
            rows = await get_all_paid_users()
            now = datetime.utcnow()
            for r in rows:
                uid = r[0]
                end_str = r[1]
                if not end_str:
                    continue
                try:
                    end = datetime.fromisoformat(end_str)
                except:
                    continue
                days_left = (end - now).days
                # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3,2,1 –¥–µ–Ω—å
                if days_left in (3,2,1):
                    try:
                        await bot.send_message(uid, f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} {'–¥–µ–Ω—å' if days_left==1 else '–¥–Ω—è' if days_left in (2,3) else '–¥–Ω–µ–π'}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å.")
                    except:
                        pass
                # –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞
                if end < now:
                    async with aiosqlite.connect(DB_PATH) as db:
                        await db.execute("UPDATE users SET paid = 0, plan = NULL, vpn_key = NULL, payment_time = NULL, subscription_end = NULL WHERE user_id = ?", (uid,))
                        await db.commit()
                    try:
                        await bot.send_message(uid, "‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø ‚Äî —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                    except:
                        pass
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤ subscription_watcher: %s", e)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        await asyncio.sleep(60 * 60 * 6)

# ---------------- Startup ----------------
async def on_startup(dp):
    await db_init()
    # –∑–∞–ø—É—Å—Ç–∏–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    loop = asyncio.get_event_loop()
    loop.create_task(subscription_watcher())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ë–∞–∑–∞ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
