import asyncio
import secrets
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

# WireGuard —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π (–ø–∞–º—è—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏)
issued_clients = {}
last_assigned_ip = 1

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    return f"10.0.0.{last_assigned_ip}"

def generate_wg_config(client_private_key: str, client_ip: str) -> str:
    return f"""[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É
main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ")
main_kb.add("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
main_kb.add("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
main_kb.add("‚ÑπÔ∏è FAQ")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏–≤–∞–π, –∞ —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN. üöÄ",
        reply_markup=main_kb
    )

@dp.message_handler(lambda message: message.text == "üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ")
async def choose_tariff(message: types.Message):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
        "1Ô∏è‚É£ 1 –º–µ—Å—è—Ü ‚Äî 100‚ÇΩ\n"
        "2Ô∏è‚É£ 3 –º–µ—Å—è—Ü–∞ ‚Äî 250‚ÇΩ (+–±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏)\n"
        "3Ô∏è‚É£ 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 400‚ÇΩ (+–±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏)\n\n"
        "–û–ø–ª–∞—Ç–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª"
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
async def payment_confirm(message: types.Message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º (—Ç—É—Ç –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤ –≥—Ä—É–ø–ø—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
    ADMIN_CHAT_ID = -1002593269045  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (id: {user_id}) —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ–ø–ª–∞—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
        f"/confirm {user_id}"
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.message_handler(lambda message: message.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def referral_info(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã! üë´\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üéâ"
    )

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è FAQ")
async def faq(message: types.Message):
    await message.answer(
        "‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:\n"
        "1. –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?\n"
        "2. –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN?\n"
        "3. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ –≤—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
@dp.message_handler(commands=['confirm'])
async def admin_confirm_payment(message: types.Message):
    # –§–æ—Ä–º–∞—Ç: /confirm <user_id>
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>")
        return

    user_id = int(args[1])
    if user_id in issued_clients:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    client_private_key = generate_private_key()
    client_ip = generate_client_ip()

    issued_clients[user_id] = {
        "private_key": client_private_key,
        "ip": client_ip,
    }

    wg_config = generate_wg_config(client_private_key, client_ip)

    try:
        await bot.send_message(user_id, "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n" 
                               "–í–æ—Ç –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard VPN, –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n" + wg_config)
        await message.answer(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
