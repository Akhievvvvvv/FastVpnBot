import logging
import re
import ssl
import certifi
import aiohttp
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.utils import executor

# ======== –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ========
API_TOKEN = "8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8"
ADMIN_CHAT_ID = -1002593269045  # —Ç–≤–æ—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞
YOUR_USER_ID = 7231676236       # —Ç–≤–æ–π user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞

OUTLINE_API_URL = "https://109.196.100.159:7235/gip-npAdi0GP2xswd_f9Nw"
OUTLINE_CERT_SHA256 = "2065D8741DB5F2DD3E9A4C6764F55ECAD1B76FBADC33E1FAF7AD1A21AC163131"

DATABASE = "fastvpn_bot.db"
# ============================

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –î–ª—è —É–¥–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö —Å user_id
confirm_cb = CallbackData("confirm", "user_id")

# SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è aiohttp (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π cert, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)
ssl_context = ssl.create_default_context(cafile=certifi.where())
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

# ===================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö =====================
async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                paid INTEGER DEFAULT 0,
                key_config TEXT,
                referrer INTEGER
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS referrals (
                referrer INTEGER,
                referee INTEGER PRIMARY KEY
            )
        """)
        await db.commit()

async def add_user(user_id: int, username: str, referrer: int = None):
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        res = await cursor.fetchone()
        if res is None:
            await db.execute(
                "INSERT INTO users(user_id, username, paid, key_config, referrer) VALUES (?, ?, 0, '', ?)",
                (user_id, username, referrer)
            )
            if referrer:
                try:
                    await db.execute("INSERT INTO referrals(referrer, referee) VALUES (?, ?)", (referrer, user_id))
                except aiosqlite.IntegrityError:
                    pass
            await db.commit()

async def set_paid(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET paid = 1 WHERE user_id = ?", (user_id,))
        await db.commit()

async def set_key(user_id: int, key_config: str):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET key_config = ? WHERE user_id = ?", (key_config, user_id))
        await db.commit()

async def get_user(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute(
            "SELECT user_id, username, paid, key_config, referrer FROM users WHERE user_id = ?",
            (user_id,)
        )
        return await cursor.fetchone()

# ========================================================

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Outline —á–µ—Ä–µ–∑ API (async)
async def create_outline_access_key():
    url = f"{OUTLINE_API_URL}/access-keys"
    headers = {
        "Content-Type": "application/json",
        "X-Outline-Server-Cert-Sha256": OUTLINE_CERT_SHA256,
    }
    payload = {
        "name": "VPN Key",
        "accessUrl": None
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers, ssl=ssl_context) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("accessUrl")
                else:
                    text = await resp.text()
                    logging.error(f"Outline API error: {resp.status} {text}")
                    return None
    except Exception as e:
        logging.error(f"Outline API request error: {e}")
        return None

# –ö—Ä–∞—Å–æ—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
WELCOME_TEXT = (
    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVpnBot!</b> üéâ\n\n"
    "‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b> ‚ú®\n"
    "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ —Ä–∞–±–æ—á–∏–π VPN –∫–ª—é—á —á–µ—Ä–µ–∑ Outline\n"
    "‚úÖ –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ\n"
    "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
    "‚úÖ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã üí∞\n\n"
    "üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
)

INSTRUCTION_TEXT = (
    "üõ† <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN —á–µ—Ä–µ–∑ Outline:</b>\n\n"
    "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
    "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π —Ä–∞–∑–¥–µ–ª <i>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</i>\n"
    "3Ô∏è‚É£ –ù–∞–∂–º–∏ <i>–ß–∞—Ç-–±–æ—Ç—ã</i>\n"
    "4Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ <b>@FastVpn_bot_bot</b>\n\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)¬ª ‚Äî –∏ —è —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–ª—é—á!\n\n"
    "–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! üòä"
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚öôÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate"),
        InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"),
    )
    return kb

# –†–∞–¥–æ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: not message.text.startswith('/'))
async def cheerful_reply(message: types.Message):
    text = (
        f"üåà –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üòÑ\n\n"
        "–Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–µ–±–µ –ø–æ–º–æ—á—å! üåü\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å VPN:\n\n"
        "üëâ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
        "üëâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
        "üëâ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
        "–¢—ã —Å—É–ø–µ—Ä, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π! üöÄ‚ú®"
    )
    await message.answer(text, reply_markup=main_menu(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    ref = None
    args = message.get_args()
    if args:
        m = re.search(r"ref=(\d+)", args)
        if m:
            ref = int(m.group(1))
            if ref == user_id:
                ref = None  # –ù–µ–ª—å–∑—è —Ä–µ—Ñ–∏—Ç—å —Å–µ–±—è

    await add_user(user_id, username, ref)

    await message.answer(WELCOME_TEXT, reply_markup=main_menu(), parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "instruction")
async def send_instruction(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, INSTRUCTION_TEXT, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "activate")
async def activate_bot(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üõ† –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö, –¥–æ–±–∞–≤—å –µ–≥–æ –≤ Telegram Business, –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="instruction")
        )
    )

@dp.callback_query_handler(lambda c: c.data == "paid")
async def confirm_payment(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=confirm_cb.new(user_id=user_id))
    )
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username or user_id} (ID: {user_id}) –Ω–∞–∂–∞–ª ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª.\n"
        f"–ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ–ø–ª–∞—Ç—É.",
        reply_markup=keyboard
    )
    await bot.send_message(user_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")

@dp.callback_query_handler(confirm_cb.filter())
async def admin_confirm_payment(callback_query: types.CallbackQuery, callback_data: dict):
    admin_id = callback_query.from_user.id
    if admin_id != YOUR_USER_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    user_id = int(callback_data["user_id"])
    user = await get_user(user_id)
    if not user:
        await bot.answer_callback_query(callback_query.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", show_alert=True)
        return

    await bot.answer_callback_query(callback_query.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –∫–ª—é—á...")

    key = await create_outline_access_key()
    if key is None:
        await bot.send_message(admin_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–ª—é—á–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    await set_paid(user_id)
    await set_key(user_id, key)

    await bot.send_message(
        user_id,
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
        f"üîë –í–æ—Ç —Ç–≤–æ–π VPN –∫–ª—é—á –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Outline:\n\n"
        f"<code>{key}</code>\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏, —è –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É! üåü",
        parse_mode="HTML"
    )

    await bot.send_message(admin_id, f"‚úÖ –ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

if __name__ == "__main__":
    import asyncio
    from aiogram import executor

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    asyncio.run(init_db())

    # –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π event loop –≤—Ä—É—á–Ω—É—é
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º event loop
    executor.start_polling(dp, skip_updates=True, loop=loop)
