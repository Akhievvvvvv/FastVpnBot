import asyncio
import secrets
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

ADMIN_GROUP_ID = -1002593269045
BOT_USERNAME = 'FastVpn_bot_bot'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

issued_clients = {}
last_assigned_ip = 1

TARIFFS = {
    "1": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 449, "days": 150}
}

REFERRAL_PREFIX = "ref_"

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    return f"10.0.0.{last_assigned_ip}"

def generate_wg_config(client_private_key: str, client_ip: str) -> str:
    return f"""[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""

def format_payment_notification(username, user_id, tariff_key):
    tariff = TARIFFS[tariff_key]
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return (
        f"üí∏ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂:</b>

"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}
"
        f"üÜî ID: {user_id}
"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']} ‚Äî {tariff['price']}‚ÇΩ
"
        f"‚è∞ –í—Ä–µ–º—è: {now_str}"
    )

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"))
    kb.add(KeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))
    return kb

def tariffs_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for key, val in TARIFFS.items():
        kb.add(KeyboardButton(f"{val['name']} ‚Äî {val['price']}‚ÇΩ"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def payment_info_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    ref = None
    if message.get_args().startswith(REFERRAL_PREFIX):
        try:
            ref = int(message.get_args()[len(REFERRAL_PREFIX):])
        except:
            ref = None
    if user_id not in issued_clients:
        issued_clients[user_id] = {
            "referral_from": ref,
            "subscription_expire": datetime.now(),
            "private_key": None,
            "ip": None,
            "tariff": None,
            "paid": False,
            "reminded": False
        }
    welcome_text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π VPN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üåêüîí

"
        "–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ, –æ–ø–ª–∞—á–∏–≤–∞–π, –∞ —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN. üöÄ

"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard:
"
        "üì± <b>Android:</b> https://play.google.com/store/apps/details?id=com.wireguard.android
"
        "üçé <b>iOS:</b> https://apps.apple.com/app/wireguard/id1441195209

"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä—è–º–æ –∏–∑ Telegram –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

"
        "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    await message.answer(welcome_text, reply_markup=main_menu())

@dp.message_handler(lambda m: m.text == "üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ")
async def choose_tariff(message: types.Message):
    await message.answer("üõí –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=tariffs_keyboard())

@dp.message_handler(lambda m: any(m.text == f"{val['name']} ‚Äî {val['price']}‚ÇΩ" for val in TARIFFS.values()))
async def selected_tariff(message: types.Message):
    chosen = None
    for key, val in TARIFFS.items():
        if message.text == f"{val['name']} ‚Äî {val['price']}‚ÇΩ":
            chosen = key
            break
    user_id = message.from_user.id
    issued_clients[user_id]["tariff"] = chosen
    issued_clients[user_id]["paid"] = False

    pay_text = (
        f"üí∞ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>

"
        f"üßæ –¢–∞—Ä–∏—Ñ: <b>{TARIFFS[chosen]['name']} ‚Äî {TARIFFS[chosen]['price']}‚ÇΩ</b>
"
        f"üè¶ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É Ozon –ë–∞–Ω–∫–∞:
"
        f"<code>89322229930</code>

"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –º–Ω–µ."
    )
    await message.answer(pay_text, reply_markup=payment_info_keyboard())

@dp.message_handler(lambda m: m.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
async def user_paid(message: types.Message):
    user = message.from_user
    user_id = user.id
    if not issued_clients[user_id].get("tariff"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ.")
        return
    if issued_clients[user_id].get("paid"):
        await message.answer("‚úÖ –¢—ã —É–∂–µ —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ, –∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    issued_clients[user_id]["paid"] = True

    tariff_key = issued_clients[user_id]["tariff"]
    username = user.username or user.first_name
    notification = format_payment_notification(username, user_id, tariff_key)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}"))
    await bot.send_message(ADMIN_GROUP_ID, notification, reply_markup=kb)
    await message.answer("üïê –û–ø–ª–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def admin_confirm(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if user_id not in issued_clients:
        return
    priv = generate_private_key()
    ip = generate_client_ip()
    issued_clients[user_id]["private_key"] = priv
    issued_clients[user_id]["ip"] = ip
    days = TARIFFS[issued_clients[user_id]["tariff"]]["days"]

    # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
    ref = issued_clients[user_id].get("referral_from")
    if ref and ref in issued_clients:
        issued_clients[ref]["subscription_expire"] += timedelta(days=7)
        days += 7

    issued_clients[user_id]["subscription_expire"] = datetime.now() + timedelta(days=days)
    config = generate_wg_config(priv, ip)
    filename = f"vpn_{user_id}.conf"
    with open(filename, "w") as f:
        f.write(config)

    await bot.send_document(user_id, InputFile(filename), caption=
        "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª WireGuard.

"
        "üì± –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard, –∏ –≤–∫–ª—é—á–∏ VPN –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π!

"
        "–ï—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
"
        "üì≤ Android: https://play.google.com/store/apps/details?id=com.wireguard.android
"
        "üçè iOS: https://apps.apple.com/app/wireguard/id1441195209

"
        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üîíüåê", reply_markup=main_menu()
    )
    await callback_query.message.edit_reply_markup()

@dp.message_handler(lambda m: m.text == "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def referral(message: types.Message):
    ref_link = f"https://t.me/{BOT_USERNAME}?start={REFERRAL_PREFIX}{message.from_user.id}"
    await message.answer(f"üéÅ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π +7 –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ!</b>

"
                         f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {ref_link}

"
                         f"üìÖ –ò–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è +7 –¥–Ω–µ–π, –∞ —Ç–µ–±–µ ‚Äî —Ç–æ–∂–µ!
"
                         f"üí• –î–µ–ª–∏—Å—å –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–π VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üöÄ", reply_markup=main_menu())

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu())

async def notify_expiring_users():
    while True:
        now = datetime.now()
        for uid, data in issued_clients.items():
            exp = data.get("subscription_expire")
            if exp and 0 < (exp - now).days <= 3 and not data.get("reminded"):
                await bot.send_message(uid, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç–≤–æ—è VPN-–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {(exp - now).days} –¥–Ω—è(–µ–π). –ü—Ä–æ–¥–ª–∏ –µ—ë, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø! üîÑ")
                issued_clients[uid]["reminded"] = True
        await asyncio.sleep(3600)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(notify_expiring_users())
    executor.start_polling(dp, skip_updates=True)
