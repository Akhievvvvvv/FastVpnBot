from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
import asyncio
import logging
import random
import string
from datetime import datetime, timedelta

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

ADMIN_CHAT_ID = -1002593269045
ADMIN_USER_ID = 7231676236

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# CallbackData –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
buy_cb = CallbackData('buy', 'period')
confirm_cb = CallbackData('confirm', 'user_id')

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –ë–î)
users = {}  
# users = {
#   user_id: {
#     'key': str,
#     'subscription_end': datetime,
#     'referrer': user_id or None,
#     'ref_bonus_days': int,
#     'ref_count': int,
#   }
# }

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    '1m': {'months': 1, 'price': 99},
    '3m': {'months': 3, 'price': 249},
    '5m': {'months': 5, 'price': 399},
}

REKVIZITS = """
üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑:
+7 932 222 99 30 (Ozon Bank)

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª(–∞)" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
"""

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ VPN (–ø—Ä–∏–º–µ—Ä)
def generate_vpn_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def welcome_text(user: types.User):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}!</b>\n\n"
        "‚ú® –Ø ‚Äî <b>FastVPN Bot</b> ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ VPN!\n\n"
        "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
        "‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
        "üì± –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —á–µ—Ä–µ–∑ Outline\n"
        "üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n"
        "üí≥ –ü—Ä–æ—Å—Ç–∞—è –æ–ø–ª–∞—Ç–∞ –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
    )
    return text

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
def tariff_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.insert(InlineKeyboardButton(
            f"{t['months']} –º–µ—Å—è—Ü(–µ–≤) ‚Äî {t['price']}‚ÇΩ", callback_data=buy_cb.new(period=key)
        ))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã
def payment_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.insert(InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
def admin_confirm_keyboard(user_id: int):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.insert(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=confirm_cb.new(user_id=user_id)))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
def view_rekvizit_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.insert(InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="view_rekvizit"))
    return kb

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def referral_link(user_id: int):
    return f"https://t.me/FastVpn_bot_bot?start=ref{user_id}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    args = message.get_args()
    referrer_id = None
    if args and args.startswith('ref'):
        try:
            referrer_id = int(args[3:])
        except:
            pass

    user_id = message.from_user.id

    if user_id not in users:
        users[user_id] = {
            'key': None,
            'subscription_end': None,
            'referrer': referrer_id if referrer_id != user_id else None,
            'ref_bonus_days': 0,
            'ref_count': 0,
        }

    text = welcome_text(message.from_user)
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    kb = tariff_keyboard()

    # –ü–æ–∫–∞–∂–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤–Ω–∏–∑—É
    text += f"\n\nüí° –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link(user_id)}\n" \
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +7 –¥–Ω–µ–π –±–æ–Ω—É—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç —Ç–∞—Ä–∏—Ñ!"

    await message.answer(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query_handler(buy_cb.filter())
async def buy_callback_handler(query: types.CallbackQuery, callback_data: dict):
    period = callback_data['period']
    tariff = TARIFFS.get(period)
    if not tariff:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff['months']} –º–µ—Å—è—Ü(–µ–≤) ‚Äî {tariff['price']}‚ÇΩ</b>\n\n"
        f"{REKVIZITS}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await query.message.edit_text(text, reply_markup=payment_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û–ø–ª–∞—Ç–∏–ª(–∞)"
@dp.callback_query_handler(text="paid")
async def paid_callback_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    user = users.get(user_id)
    if not user:
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = (
        f"üí∞ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ Username: @{query.from_user.username or '–Ω–µ—Ç'}\n"
        f"üÜî User ID: {user_id}\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–°—Å—ã–ª–∫–∞: [–ø–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É](tg://user?id={user_id})"
    )
    await bot.send_message(ADMIN_CHAT_ID, text, parse_mode='Markdown', reply_markup=admin_confirm_keyboard(user_id))
    await query.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É.", show_alert=True)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º
@dp.callback_query_handler(confirm_cb.filter())
async def confirm_payment_handler(query: types.CallbackQuery, callback_data: dict):
    admin_id = query.from_user.id
    if admin_id != ADMIN_USER_ID:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    user_id = int(callback_data['user_id'])
    user = users.get(user_id)
    if not user:
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤—ã–±–∏—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º 1 –º–µ—Å—è—Ü, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω–∞–¥–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞.
    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —Ç–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ.

    # –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–∞—Ä–∏—Ñ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    # –î–æ–±–∞–≤–∏–º —Ç–∞—Ä–∏—Ñ –≤ users[user_id]['selected_tariff']

    # –ù–æ —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å 30 –¥–Ω–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∞)

    # –î–ª—è –ª—É—á—à–µ–π –ª–æ–≥–∏–∫–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å last_selected_tariff:
    last_selected_tariff = user.get('selected_tariff')
    if last_selected_tariff and last_selected_tariff in TARIFFS:
        months = TARIFFS[last_selected_tariff]['months']
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî 1 –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        months = 1

    now = datetime.now()
    if user['subscription_end'] and user['subscription_end'] > now:
        user['subscription_end'] += timedelta(days=30*months)
    else:
        user['subscription_end'] = now + timedelta(days=30*months)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
    key = generate_vpn_key()
    user['key'] = key

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä ‚Äî –¥–∞—ë–º –±–æ–Ω—É—Å
    if user['referrer']:
        ref_user = users.get(user['referrer'])
        if ref_user:
            ref_user['subscription_end'] = (ref_user['subscription_end'] if ref_user['subscription_end'] and ref_user['subscription_end'] > now else now) + timedelta(days=7)
            ref_user['ref_bonus_days'] = ref_user.get('ref_bonus_days', 0) + 7
            ref_user['ref_count'] = ref_user.get('ref_count', 0) + 1

            # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            await bot.send_message(user['referrer'],
                                   f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Ç–∞—Ä–∏—Ñ. –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ +7 –¥–Ω–µ–π –±–æ–Ω—É—Å–∞!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    instruction = (
        f"üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        f"üîë –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á VPN:\n<code>{key}</code>\n\n"
        "üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á:\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline VPN –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é'.\n"
        "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.\n\n"
        f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{user['subscription_end'].strftime('%Y-%m-%d')}</b>\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ FastVPN! –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ —Å—é–¥–∞."
    )
    await bot.send_message(user_id, instruction, parse_mode='HTML')

    await query.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await query.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —É –∞–¥–º–∏–Ω–∞

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
@dp.callback_query_handler(buy_cb.filter())
async def save_tariff_handler(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    period = callback_data['period']
    if user_id in users:
        users[user_id]['selected_tariff'] = period
    await buy_callback_handler(query, callback_data)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
@dp.callback_query_handler(text="view_rekvizit")
async def view_rekvizit_handler(query: types.CallbackQuery):
    await query.answer()
    await query.message.answer(REKVIZITS)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
async def subscription_checker():
    while True:
        now = datetime.now()
        for user_id, data in users.items():
            if data['subscription_end']:
                days_left = (data['subscription_end'] - now).days
                if days_left in [3, 2, 1]:
                    try:
                        await bot.send_message(user_id, f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–µ–Ω—å(–¥–Ω–µ–π). –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë!")
                    except Exception:
                        pass
                elif days_left < 0:
                    try:
                        await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
                    except Exception:
                        pass
        await asyncio.sleep(24 * 60 * 60)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Ñ–æ–Ω–µ
async def on_startup(dp):
    asyncio.create_task(subscription_checker())

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, on_startup=on_startup)
