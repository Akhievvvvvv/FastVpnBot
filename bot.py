import asyncio
import secrets
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WireGuard
SERVER_PUBLIC_KEY = 'D4na0QwqCtqZatcyavT95NmLITuEaCjsnS9yl0mymUA='
SERVER_IP = '109.196.100.159'
SERVER_PORT = 51820

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

issued_clients = {}
last_assigned_ip = 1

TARIFFS = {
    "1 –º–µ—Å—è—Ü": 100,
    "3 –º–µ—Å—è—Ü–∞ (+–±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏)": 250,
    "5 –º–µ—Å—è—Ü–µ–≤ (+–±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏)": 400,
}

REKVIZITS = "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: 89322229930\nüè¶ –ë–∞–Ω–∫: Ozon bank"

def generate_private_key():
    return secrets.token_urlsafe(32)

def generate_client_ip():
    global last_assigned_ip
    last_assigned_ip += 1
    return f"10.0.0.{last_assigned_ip}"

def generate_wg_config(client_private_key: str, client_ip: str) -> str:
    return f"""[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:{SERVER_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""

def main_menu_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for t in TARIFFS:
        kb.insert(InlineKeyboardButton(text=f"{t} ‚Äî {TARIFFS[t]} ‚ÇΩ", callback_data=f"tariff_{t}"))
    kb.insert(InlineKeyboardButton(text="FAQ ü§î", callback_data="faq"))
    kb.insert(InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üéÅ", callback_data="referral"))
    return kb

def payment_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª, –∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ", callback_data="paid"))
    return kb

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –±–æ—Ç FastVpnBot ‚Äî –≤—ã–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard VPN –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'))
async def process_tariff_selection(callback_query: types.CallbackQuery):
    tariff_name = callback_query.data[7:]
    price = TARIFFS.get(tariff_name)
    if not price:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: *{tariff_name}*\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*\n\n"
    text += REKVIZITS
    text += "\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –º–Ω–µ, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏."
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown', reply_markup=payment_keyboard())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'faq')
async def process_faq(callback_query: types.CallbackQuery):
    faq_text = (
        "‚ùì *FAQ* ‚ùì\n\n"
        "‚û°Ô∏è *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:*\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 7 –¥–Ω–µ–π –±–æ–Ω—É—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É!\n\n"
        "‚û°Ô∏è *–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:*\n"
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –≤—ã–¥–∞–ª –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞.\n\n"
        "‚û°Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:*\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–Ø –æ–ø–ª–∞—Ç–∏–ª\" –≤ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞.\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
    )
    await bot.send_message(callback_query.from_user.id, faq_text, parse_mode='Markdown')
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'referral')
async def process_referral(callback_query: types.CallbackQuery):
    referral_text = (
        "üéÅ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN!\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n\n"
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)."
    )
    await bot.send_message(callback_query.from_user.id, referral_text, parse_mode='Markdown')
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'paid')
async def process_paid(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await callback_query.answer()

@dp.message_handler(commands=['confirm'])
async def admin_confirm_payment(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>")
        return
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if user_id in issued_clients:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    client_private_key = generate_private_key()
    client_ip = generate_client_ip()

    issued_clients[user_id] = {
        "private_key": client_private_key,
        "ip": client_ip,
    }

    wg_config = generate_wg_config(client_private_key, client_ip)

    try:
        await bot.send_message(user_id, "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í–æ—Ç –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard:\n\n" + wg_config)
        await message.answer(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
