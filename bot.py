import logging
import random
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import urllib3

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

ADMIN_CHAT_ID = -1002593269045
ADMIN_USER_ID = 7231676236

users = {}  # user_id -> {"subscription_until": datetime, "roulette_used": bool}
payments_pending = {}  # user_id -> {"months": int, "price": int, "timestamp": datetime}

roulette_days = [3, 5, 7, 10]

# ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Outline API
OUTLINE_API_URL = "https://109.196.100.159:55633/bkz9X4_oG7jiaYtDNinlBQ"

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü - 100‚ÇΩ", callback_data="buy_1m"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ + –±–æ–Ω—É—Å", callback_data="buy_3m"),
        InlineKeyboardButton("5 –º–µ—Å—è—Ü–µ–≤ - 400‚ÇΩ + –±–æ–Ω—É—Å", callback_data="buy_5m"),
    )
    kb.add(
        InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤", callback_data="roulette"),
    )
    return kb

def create_outline_user():
    try:
        # –¢–æ–∫–µ–Ω ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å URL –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–µ—à–∞
        token = OUTLINE_API_URL.split('/')[-1]
        api_base_url = OUTLINE_API_URL.rsplit('/', 1)[0]

        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }

        url = f"{api_base_url}/access-keys"
        response = requests.post(url, headers=headers, verify=False)
        if response.status_code == 200:
            data = response.json()
            return data["accessUrl"]  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ Outline
        else:
            print(f"–û—à–∏–±–∫–∞ Outline API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Outline –∫–ª—é—á–∞: {e}")
        return None

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"subscription_until": None, "roulette_used": False}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_id not in users:
        users[user_id] = {"subscription_until": None, "roulette_used": False}

    if data.startswith("buy_"):
        months = int(data.split("_")[1][0])
        price_map = {1: 100, 3: 250, 5: 400}
        price = price_map.get(months)
        payments_pending[user_id] = {"months": months, "price": price, "timestamp": datetime.now()}
        await callback_query.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤) –∑–∞ {price}‚ÇΩ.\n"
            "–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É Ozon –ë–∞–Ω–∫–∞: +7 932 222-99-30\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid_confirm"))
        )
        await callback_query.answer()

    elif data == "paid_confirm":
        if user_id not in payments_pending:
            await callback_query.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –æ–ø–ª–∞—Ç—ã.", show_alert=True)
            return
        pay_info = payments_pending[user_id]
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username or user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"‚Ä¢ {pay_info['months']} –º–µ—Å. –∑–∞ {pay_info['price']}‚ÇΩ\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {pay_info['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user_id}")
            )
        )
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

    elif data.startswith("admin_confirm_"):
        admin_id = callback_query.from_user.id
        if admin_id != ADMIN_USER_ID:
            await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", show_alert=True)
            return

        uid = int(data.split("_")[-1])
        if uid not in payments_pending:
            await callback_query.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
            return

        pay_info = payments_pending.pop(uid)
        now = datetime.now()
        current_until = users.get(uid, {}).get("subscription_until")
        if current_until and current_until > now:
            new_until = current_until + timedelta(days=30 * pay_info["months"])
        else:
            new_until = now + timedelta(days=30 * pay_info["months"])

        # –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏
        bonus_days = 0
        if pay_info["months"] == 3:
            bonus_days = 15
        elif pay_info["months"] == 5:
            bonus_days = 30
        new_until += timedelta(days=bonus_days)

        users[uid]["subscription_until"] = new_until
        users[uid]["roulette_used"] = False

        outline_link = create_outline_user()

        if outline_link:
            await bot.send_message(
                uid,
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_until.strftime('%Y-%m-%d %H:%M:%S')}!\n"
                f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏: {bonus_days}\n\n"
                f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è VPN-—Å—Å—ã–ª–∫–∞ –¥–ª—è Outline:\n{outline_link}\n\n"
                "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å."
            )
        else:
            await bot.send_message(
                uid,
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É Outline.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

        await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    elif data == "roulette":
        user = users.get(user_id)
        now = datetime.now()
        if not user["subscription_until"] or user["subscription_until"] < now:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
            return
        if user["roulette_used"]:
            await callback_query.answer("–†—É–ª–µ—Ç–∫—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)
            return

        reward_days = random.choice(roulette_days)
        user["subscription_until"] += timedelta(days=reward_days)
        user["roulette_used"] = True

        await callback_query.answer(f"üéâ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {reward_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π!", show_alert=True)

    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

if __name__ == "__main__":
    print("Bot started")
    asyncio.run(dp.start_polling())
