import logging
import re
import ssl
import certifi
import aiohttp
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

# --- –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ---
API_TOKEN = "8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8"
ADMIN_CHAT_ID = -1002593269045
YOUR_USER_ID = 7231676236  # —Ç–≤–æ–π ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

OUTLINE_API_URL = "https://109.196.100.159:7235/gip-npAdi0GP2xswd_f9Nw"
OUTLINE_CERT_SHA256 = "2065D8741DB5F2DD3E9A4C6764F55ECAD1B76FBADC33E1FAF7AD1A21AC163131"

DATABASE = "fastvpn_bot.db"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

confirm_cb = CallbackData("confirm", "user_id", "tariff")

# SSL –¥–ª—è Outline API (—Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
ssl_context = ssl.create_default_context(cafile=certifi.where())
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---

async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                paid INTEGER DEFAULT 0,
                key_config TEXT,
                referrer INTEGER,
                tariff TEXT DEFAULT ''
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS referrals (
                referrer INTEGER,
                referee INTEGER PRIMARY KEY
            )
        """)
        await db.commit()

async def add_user(user_id: int, username: str, referrer: int = None):
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        res = await cursor.fetchone()
        if res is None:
            await db.execute(
                "INSERT INTO users(user_id, username, paid, key_config, referrer) VALUES (?, ?, 0, '', ?)",
                (user_id, username, referrer)
            )
            if referrer and referrer != user_id:
                try:
                    await db.execute("INSERT INTO referrals(referrer, referee) VALUES (?, ?)", (referrer, user_id))
                except aiosqlite.IntegrityError:
                    pass
            await db.commit()

async def set_paid(user_id: int, tariff: str):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET paid = 1, tariff = ? WHERE user_id = ?", (tariff, user_id))
        await db.commit()

async def set_key(user_id: int, key_config: str):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET key_config = ? WHERE user_id = ?", (key_config, user_id))
        await db.commit()

async def get_user(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute(
            "SELECT user_id, username, paid, key_config, referrer, tariff FROM users WHERE user_id = ?",
            (user_id,)
        )
        return await cursor.fetchone()

async def get_referral_stats(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT COUNT(*) FROM referrals WHERE referrer = ?", (user_id,))
        total = (await cursor.fetchone())[0]
        cursor = await db.execute("""
            SELECT COUNT(*) FROM users 
            WHERE referrer = ? AND paid = 1
        """, (user_id,))
        paid = (await cursor.fetchone())[0]
        return total, paid

# --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ Outline API ---

async def create_outline_access_key():
    url = f"{OUTLINE_API_URL}/access-keys"
    headers = {
        "Content-Type": "application/json",
        "X-Outline-Server-Cert-Sha256": OUTLINE_CERT_SHA256,
    }
    payload = {
        "name": "VPN Key",
        "accessUrl": None
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers, ssl=ssl_context) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("accessUrl")
                else:
                    text = await resp.text()
                    logging.error(f"Outline API error: {resp.status} {text}")
                    return None
    except Exception as e:
        logging.error(f"Outline API request error: {e}")
        return None

# --- –¢–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

WELCOME_TEXT = (
    "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVpnBot!</b> üåü\n\n"
    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á –¥–ª—è Outline, –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! üîê\n\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n"
)

REKVIZITY_TEXT = (
    "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
    "+7 932 222 99 30 (Ozon Bank)\n"
    "–û–ø–ª–∞—Ç–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º:\n"
    "1 –º–µ—Å—è—Ü ‚Äî 99 ‚ÇΩ\n"
    "3 –º–µ—Å—è—Ü–∞ ‚Äî 249 ‚ÇΩ\n"
    "5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399 ‚ÇΩ\n\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
)

INSTRUCTION_TEXT = (
    "üõ† <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN —á–µ—Ä–µ–∑ Outline:</b>\n\n"
    "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
    "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π —Ä–∞–∑–¥–µ–ª <i>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</i>\n"
    "3Ô∏è‚É£ –ù–∞–∂–º–∏ <i>–ß–∞—Ç-–±–æ—Ç—ã</i>\n"
    "4Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ <b>@FastVpn_bot_bot</b>\n\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ¬´üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)¬ª ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–ª—é—á!\n"
    "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏, –ø–æ–º–æ–≥—É –≤—Å–µ–≥–¥–∞! üòä"
)

def main_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìÉ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs"),
        InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="show_referral"),
        InlineKeyboardButton("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="show_rekvizity"),
        InlineKeyboardButton("üõ† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"),
    )
    return kb

def tariffs_menu(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äî 99 ‚ÇΩ", callback_data=confirm_cb.new(user_id=user_id, tariff="1 –º–µ—Å")),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ ‚Äî 249 ‚ÇΩ", callback_data=confirm_cb.new(user_id=user_id, tariff="3 –º–µ—Å")),
        InlineKeyboardButton("5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399 ‚ÇΩ", callback_data=confirm_cb.new(user_id=user_id, tariff="5 –º–µ—Å")),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"),
    )
    return kb

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    ref = None
    args = message.get_args()
    if args:
        m = re.search(r"ref=(\d+)", args)
        if m:
            ref = int(m.group(1))
            if ref == user_id:
                ref = None

    await add_user(user_id, username, ref)
    await message.answer(WELCOME_TEXT, reply_markup=main_menu(), parse_mode="HTML")

@dp.message_handler(commands=["ref"])
async def cmd_referral(message: types.Message):
    user_id = message.from_user.id
    total, paid = await get_referral_stats(user_id)
    ref_link = f"https://t.me/FastVpn_bot_bot?start=ref={user_id}"
    text = (
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"{ref_link}\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—à–ª–æ –ø–æ —Å—Å—ã–ª–∫–µ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {paid}"
    )
    await message.answer(text, parse_mode="HTML")

@dp.message_handler(lambda m: m.text and not m.text.startswith('/'))
async def any_message_reply(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å VPN:",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def cb_main_menu(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(WELCOME_TEXT, reply_markup=main_menu(), parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "show_tariffs")
async def cb_show_tariffs(call: types.CallbackQuery):
    await call.answer()
    kb = tariffs_menu(call.from_user.id)
    await call.message.edit_text("üìÉ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>", reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(confirm_cb.filter())
async def cb_confirm_payment(call: types.CallbackQuery, callback_data: dict):
    user_id = int(callback_data["user_id"])
    tariff = callback_data["tariff"]
    if call.from_user.id != user_id:
        await call.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff}</b>\n\n{REKVIZITY_TEXT}", reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "paid")
async def cb_paid(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_confirm_{user_id}"))
    await bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or user_id} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("admin_confirm_"))
async def cb_admin_confirm(call: types.CallbackQuery):
    if call.from_user.id != YOUR_USER_ID:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return
    user_id = int(call.data.split("_")[-1])
    await set_paid(user_id, "–ø–æ–¥–ø–∏—Å–∫–∞")
    key = await create_outline_access_key()
    if key:
        await set_key(user_id, key)
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–í–æ—Ç –≤–∞—à VPN –∫–ª—é—á –¥–ª—è Outline:\n{key}")
    else:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–ª—é—á–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await call.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await call.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

@dp.callback_query_handler(lambda c: c.data == "show_rekvizity")
async def cb_show_rekvizity(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(REKVIZITY_TEXT, reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    ), parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "instruction")
async def cb_instruction(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        INSTRUCTION_TEXT,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "show_referral")
async def cb_show_referral(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    total, paid = await get_referral_stats(user_id)
    ref_link = f"https://t.me/FastVpn_bot_bot?start=ref={user_id}"
    text = (
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"{ref_link}\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—à–ª–æ –ø–æ —Å—Å—ã–ª–∫–µ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {paid}"
    )
    await call.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "show_rekvizity")
async def cb_show_rekvizity(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        REKVIZITY_TEXT,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def cb_main_menu(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        WELCOME_TEXT,
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "show_tariffs")
async def cb_show_tariffs(call: types.CallbackQuery):
    await call.answer()
    kb = tariffs_menu(call.from_user.id)
    await call.message.edit_text(
        "üìÉ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(confirm_cb.filter())
async def cb_confirm_payment(call: types.CallbackQuery, callback_data: dict):
    user_id = int(callback_data["user_id"])
    tariff = callback_data["tariff"]
    if call.from_user.id != user_id:
        await call.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff}</b>\n\n{REKVIZITY_TEXT}",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "paid")
async def cb_paid(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_confirm_{user_id}"))
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or user_id} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("admin_confirm_"))
async def cb_admin_confirm(call: types.CallbackQuery):
    if call.from_user.id != YOUR_USER_ID:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return
    user_id = int(call.data.split("_")[-1])
    await set_paid(user_id, "–ø–æ–¥–ø–∏—Å–∫–∞")
    key = await create_outline_access_key()
    if key:
        await set_key(user_id, key)
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–í–æ—Ç –≤–∞—à VPN –∫–ª—é—á –¥–ª—è Outline:\n{key}"
        )
    else:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–ª—é—á–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await call.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await call.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    ref = None
    args = message.get_args()
    if args:
        m = re.search(r"ref=(\d+)", args)
        if m:
            ref = int(m.group(1))
            if ref == user_id:
                ref = None

    await add_user(user_id, username, ref)
    await message.answer(
        WELCOME_TEXT,
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

@dp.message_handler(commands=["ref"])
async def cmd_referral(message: types.Message):
    user_id = message.from_user.id
    total, paid = await get_referral_stats(user_id)
    ref_link = f"https://t.me/FastVpn_bot_bot?start=ref={user_id}"
    text = (
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"{ref_link}\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—à–ª–æ –ø–æ —Å—Å—ã–ª–∫–µ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {paid}"
    )
    await message.answer(text, parse_mode="HTML")

@dp.message_handler(lambda m: m.text and not m.text.startswith('/'))
async def any_message_reply(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å VPN:",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

from aiogram import executor

async def main():
    await init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
