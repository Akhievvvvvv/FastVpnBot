import logging
import random
import string
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import aiosqlite

API_TOKEN = '8484443635:AAGpJkY1qDtfDFmvsh-cbu6CIYqC8cfVTD8'
ADMIN_ID = 7231676236  # —Ç–≤–æ–π user_id

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30},
    "3m": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 249, "days": 90},
    "5m": {"name": "5 –º–µ—Å—è—Ü–µ–≤", "price": 399, "days": 150}
}

DB_PATH = "fastvpn_users.db"

# ------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# ------------------------

async def db_init():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            ref TEXT,
            paid INTEGER DEFAULT 0,
            plan TEXT,
            payment_time TEXT,
            vpn_key TEXT
        )''')
        await db.commit()

async def add_user(user_id: int, username: str, ref: str = None):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, ref) VALUES (?, ?, ?)",
            (user_id, username, ref)
        )
        await db.commit()

async def set_user_plan(user_id: int, plan: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET plan = ? WHERE user_id = ?", (plan, user_id))
        await db.commit()

async def set_user_paid(user_id: int, paid: bool):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET paid = ? WHERE user_id = ?", (1 if paid else 0, user_id))
        await db.commit()

async def set_payment_time(user_id: int, payment_time: datetime):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET payment_time = ? WHERE user_id = ?", (payment_time.isoformat(), user_id))
        await db.commit()

async def set_vpn_key(user_id: int, key: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET vpn_key = ? WHERE user_id = ?", (key, user_id))
        await db.commit()

async def get_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT user_id, username, ref, paid, plan, payment_time, vpn_key FROM users WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()
        return row

async def get_all_paid_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT user_id, username, plan, payment_time FROM users WHERE paid = 1")
        rows = await cursor.fetchall()
        return rows

# ------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ------------------------

def generate_vpn_key():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

def get_welcome_text(user: types.User):
    ref_link = f"https://t.me/FastVpn_bot_bot?start={user.id}"
    return (
        f"‚ú®üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ FastVPN ‚Äî —Ç–≤–æ—ë–º –Ω–∞–¥—ë–∂–Ω–æ–º —Å–ø—É—Ç–Ω–∏–∫–µ –≤ –º–∏—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</b> üëã‚ú®\n\n"
        f"–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        f"üåê –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–∞–π—Ç–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º, –≥–¥–µ –±—ã —Ç—ã –Ω–∏ –±—ã–ª\n"
        f"üîí –ê–±—Å–æ–ª—é—Ç–Ω—É—é –∑–∞—â–∏—Ç—É –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        f"üì± –ü–æ–¥–¥–µ—Ä–∂–∫—É iPhone –∏ Android —Å —É–¥–æ–±–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏\n"
        f"üíé –ü—Ä–æ—Å—Ç–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∑–∞–º–æ—Ä–æ—á–µ–∫\n\n"
        f"üìä <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>\n"
        f"üóìÔ∏è 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ\n"
        f"üóìÔ∏è 3 –º–µ—Å—è—Ü–∞ ‚Äî 249‚ÇΩ\n"
        f"üóìÔ∏è 5 –º–µ—Å—è—Ü–µ–≤ ‚Äî 399‚ÇΩ\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π 3 –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        f"–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<a href='{ref_link}'>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ —ç–∫–æ–Ω–æ–º—å!</a>\n\n"
        f"üì≤ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è FastVPN? –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!</b>\n"
        f"1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—à—å —Ç–∞—Ä–∏—Ñ\n"
        f"2Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ—à—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        f"3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π VPN-–∫–ª—é—á ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π!\n"
        f"4Ô∏è‚É£ –í—Å—Ç–∞–≤–ª—è–µ—à—å –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ—à—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!\n\n"
        f"üí≥ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ —É–≤–∏–¥–∏—à—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        f"‚¨áÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª\n"
        f"üîî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–∏—à–ª—ë—Ç —Ç–µ–±–µ –∫–ª—é—á\n\n"
        f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FastVPN! –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å —Ç–æ–±–æ–π! üåü"
    )

def main_menu_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.insert(InlineKeyboardButton(text=f"{t['name']} ‚Äî {t['price']}‚ÇΩ", callback_data=f"tariff_{key}"))
    kb.add(InlineKeyboardButton(text="üì≤ –°–∫–∞—á–∞—Ç—å –¥–ª—è iPhone", url="https://apps.apple.com/app/outline-vpn/id1356177741"))
    kb.add(InlineKeyboardButton(text="ü§ñ –°–∫–∞—á–∞—Ç—å –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client"))
    return kb

def paid_button():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"))
    return kb

def admin_confirm_button(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}"))
    return kb

# ------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ------------------------

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    ref_id = message.get_args() if message.get_args() else None
    await add_user(user.id, user.username or "", ref_id)
    text = get_welcome_text(user)
    await message.answer(text, parse_mode='HTML', disable_web_page_preview=True, reply_markup=main_menu_keyboard())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'))
async def process_tariff(callback_query: types.CallbackQuery):
    tariff_key = callback_query.data[len("tariff_"):]
    if tariff_key not in TARIFFS:
        await callback_query.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return
    tariff = TARIFFS[tariff_key]
    user_id = callback_query.from_user.id
    await set_user_plan(user_id, tariff_key)
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff['name']}</b> –∑–∞ <b>{tariff['price']}‚ÇΩ</b>.\n\n"
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"+7 932 222 99 30 (Ozon Bank)\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à VPN-–∫–ª—é—á."
    )
    await callback_query.message.edit_text(text, parse_mode='HTML', reply_markup=paid_button())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "paid")
async def process_paid(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = await get_user(user_id)
    if not user_data or not user_data[4]:  # plan
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
        return
    if user_data[3] == 1:  # paid
        await callback_query
